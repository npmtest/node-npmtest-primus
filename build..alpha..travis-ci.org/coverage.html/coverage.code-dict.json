{"/home/travis/build/npmtest/node-npmtest-primus/test.js":"/* istanbul instrument in package npmtest_primus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-primus/lib.npmtest_primus.js":"/* istanbul instrument in package npmtest_primus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_primus = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_primus = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-primus/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-primus && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_primus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_primus\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_primus.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_primus.rollup.js'] =\n            local.assetsDict['/assets.npmtest_primus.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_primus.__dirname + '/lib.npmtest_primus.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/index.js":"'use strict';\n\nvar PrimusError = require('./errors').PrimusError\n  , EventEmitter = require('eventemitter3')\n  , Transformer = require('./transformer')\n  , log = require('diagnostics')('primus')\n  , Spark = require('./spark')\n  , fuse = require('fusing')\n  , fs = require('fs')\n  , vm = require('vm');\n\n/**\n * Primus is a universal wrapper for real-time frameworks that provides a common\n * interface for server and client interaction.\n *\n * @constructor\n * @param {HTTP.Server} server HTTP or HTTPS server instance.\n * @param {Object} options Configuration\n * @api public\n */\nfunction Primus(server, options) {\n  if (!(this instanceof Primus)) return new Primus(server, options);\n\n  this.fuse();\n\n  if ('object' !== typeof server) {\n    var message = 'The first argument of the constructor must be ' +\n      'an HTTP or HTTPS server instance';\n    throw new PrimusError(message, this);\n  }\n\n  options = options || {};\n  options.maxLength = options.maxLength || 10485760;  // Maximum allowed packet size.\n  options.transport = options.transport || {};        // Transformer specific options.\n  options.pingInterval = 'pingInterval' in options    // Heartbeat interval.\n    ? options.pingInterval\n    : 30000;\n\n  if ('timeout' in options) {\n    throw new PrimusError('The `timeout` option has been removed', this);\n  }\n\n  var primus = this\n    , key;\n\n  this.auth = options.authorization || null;  // Do we have an authorization handler.\n  this.connections = Object.create(null);     // Connection storage.\n  this.ark = Object.create(null);             // Plugin storage.\n  this.layers = [];                           // Middleware layers.\n  this.heartbeatInterval = null;              // The heartbeat interval.\n  this.transformer = null;                    // Reference to the real-time engine instance.\n  this.encoder = null;                        // Shorthand to the parser's encoder.\n  this.decoder = null;                        // Shorthand to the parser's decoder.\n  this.connected = 0;                         // Connection counter.\n  this.whitelist = [];                        // Forwarded-for white listing.\n  this.options = options;                     // The configuration.\n  this.transformers = {                       // Message transformers.\n    outgoing: [],\n    incoming: []\n  };\n\n  this.server = server;\n  this.pathname = 'string' === typeof options.pathname\n    ? options.pathname.charAt(0) !== '/'\n      ? '/'+ options.pathname\n      : options.pathname\n    : '/primus';\n\n  //\n  // Create a specification file with the information that people might need to\n  // connect to the server.\n  //\n  this.spec = {\n    pingInterval: options.pingInterval,\n    pathname: this.pathname,\n    version: this.version\n  };\n\n  //\n  // Create a pre-bound Spark constructor. Doing a Spark.bind(Spark, this) doesn't\n  // work as we cannot extend the constructor of it anymore. The added benefit of\n  // approach listed below is that the prototype extensions are only applied to\n  // the Spark of this Primus instance.\n  //\n  this.Spark = function Sparky(headers, address, query, id, request) {\n    Spark.call(this, primus, headers, address, query, id, request);\n  };\n\n  this.Spark.prototype = Object.create(Spark.prototype, {\n    constructor: {\n      configurable: true,\n      value: this.Spark,\n      writable: true\n    },\n    __initialise: {\n      value: Spark.prototype.__initialise.slice(),\n      configurable: true,\n      writable: true\n    }\n  });\n\n  //\n  // Copy over the original Spark static properties and methods so readable and\n  // writable can also be used.\n  //\n  for (key in Spark) {\n    this.Spark[key] = Spark[key];\n  }\n\n  this.parsers(options.parser);\n  this.initialise(options.transformer, options);\n\n  //\n  // If the plugins are supplied through the options, also initialise them.\n  // This also allows us to use plugins when creating a client constructor\n  // with the `Primus.createSocket({})` method.\n  //\n  if ('string' === typeof options.plugin) {\n    options.plugin.split(/[, ]+/).forEach(function register(name) {\n      primus.plugin(name, name);\n    });\n  } else if ('object' === typeof options.plugin) {\n    for (key in options.plugin) {\n      this.plugin(key, options.plugin[key]);\n    }\n  }\n\n  //\n  // - Cluster node 0.10 lets the Operating System decide to which worker a request\n  //   goes. This can result in a not even distribution where some workers are\n  //   used at 10% while others at 90%. In addition to that the load balancing\n  //   isn't sticky.\n  //\n  // - Cluster node 0.12 implements a custom round robin algorithm. This solves the\n  //   not even distribution of work but it does not address our sticky session\n  //   requirement.\n  //\n  // Projects like `sticky-session` attempt to implement sticky sessions but they\n  // are using `net` server instead of a HTTP server in combination with the\n  // remoteAddress of the connection to load balance. This does not work when you\n  // address your servers behind a load balancer as the IP is set to the load\n  // balancer, not the connecting clients. All in all, it only causes more\n  // scalability problems. So we've opted-in to warn users about the\n  // risks of using Primus in a cluster.\n  //\n  if (!options.iknowclusterwillbreakconnections && require('cluster').isWorker) [\n    '',\n    'The `cluster` module does not implement sticky sessions. Learn more about',\n    'this issue at:',\n    '',\n    'http://github.com/primus/primus#can-i-use-cluster',\n    ''\n  ].forEach(function warn(line) {\n    console.error('Primus: '+ line);\n  });\n}\n\n//\n// Fuse and spice-up the Primus prototype with EventEmitter and predefine\n// awesomeness.\n//\nfuse(Primus, EventEmitter);\n\n//\n// Lazy read the primus.js JavaScript client.\n//\nObject.defineProperty(Primus.prototype, 'client', {\n  get: function read() {\n    if (!read.primus) {\n      read.primus = fs.readFileSync(__dirname + '/dist/primus.js', 'utf-8');\n    }\n\n    return read.primus;\n  }\n});\n\n//\n// Lazy compile the primus.js JavaScript client for Node.js\n//\nObject.defineProperty(Primus.prototype, 'Socket', {\n  get: function () {\n    const sandbox = Object.keys(global).reduce((acc, key) => {\n      if (key !== 'global' && key !== 'require') acc[key] = global[key];\n      return acc;\n    }, {\n      __dirname: process.cwd(),\n      __filename: 'primus.js',\n      require: require,\n\n      //\n      // The following globals are introduced so libraries that use `instanceof`\n      // checks for type checking do not fail as the code is run in a new\n      // context.\n      //\n      Uint8Array: Uint8Array,\n      Object: Object,\n      RegExp: RegExp,\n      Array: Array,\n      Error: Error,\n      Date: Date\n    });\n\n    vm.runInNewContext(this.library(true), sandbox, { filename: 'primus.js' });\n    return sandbox.Primus;\n  }\n});\n\n//\n// Expose the current version number.\n//\nPrimus.prototype.version = require('./package.json').version;\n\n//\n// A list of supported transformers and the required Node.js modules.\n//\nPrimus.transformers = require('./transformers.json');\nPrimus.parsers = require('./parsers.json');\n\n/**\n * Simple function to output common errors.\n *\n * @param {String} what What is missing.\n * @param {Object} where Either Primus.parsers or Primus.transformers.\n * @returns {Object}\n * @api private\n */\nPrimus.readable('is', function is(what, where) {\n  var missing = Primus.parsers !== where\n      ? 'transformer'\n      : 'parser'\n    , dependency = where[what];\n\n  return {\n    missing: function write() {\n      console.error('Primus:');\n      console.error('Primus: Missing required npm dependency for '+ what);\n      console.error('Primus: Please run the following command and try again:');\n      console.error('Primus:');\n      console.error('Primus:   npm install --save %s', dependency.server);\n      console.error('Primus:');\n\n      return 'Missing dependencies for '+ missing +': \"'+ what + '\"';\n    },\n\n    unknown: function write() {\n      console.error('Primus:');\n      console.error('Primus: Unsupported %s: \"%s\"', missing, what);\n      console.error('Primus: We only support the following %ss:', missing);\n      console.error('Primus:');\n      console.error('Primus:   %s', Object.keys(where).join(', '));\n      console.error('Primus:');\n\n      return 'Unsupported '+ missing +': \"'+ what +'\"';\n    }\n  };\n});\n\n/**\n * Initialise the real-time engine that was chosen.\n *\n * @param {Mixed} Transformer The name of the transformer or a constructor;\n * @param {Object} options Options.\n * @api private\n */\nPrimus.readable('initialise', function initialise(Transformer, options) {\n  Transformer = Transformer || 'websockets';\n\n  var primus = this\n    , transformer;\n\n  if ('string' === typeof Transformer) {\n    log('transformer `%s` is a string, attempting to resolve location', Transformer);\n    Transformer = transformer = Transformer.toLowerCase();\n    this.spec.transformer = transformer;\n\n    //\n    // This is a unknown transformer, it could be people made a typo.\n    //\n    if (!(Transformer in Primus.transformers)) {\n      log('the supplied transformer %s is not supported, please use %s', transformer, Primus.transformers);\n      throw new PrimusError(this.is(Transformer, Primus.transformers).unknown(), this);\n    }\n\n    try {\n      Transformer = require('./transformers/'+ transformer);\n      this.transformer = new Transformer(this);\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND') {\n        log('the supplied transformer `%s` is missing', transformer);\n        throw new PrimusError(this.is(transformer, Primus.transformers).missing(), this);\n      } else {\n        log(e);\n        throw e;\n      }\n    }\n  } else {\n    log('received a custom transformer');\n    this.spec.transformer = 'custom';\n  }\n\n  if ('function' !== typeof Transformer) {\n    throw new PrimusError('The given transformer is not a constructor', this);\n  }\n\n  this.transformer = this.transformer || new Transformer(this);\n\n  this.on('connection', function connection(stream) {\n    this.connected++;\n    this.connections[stream.id] = stream;\n\n    log('connection: %s currently serving %d concurrent', stream.id, this.connected);\n  });\n\n  this.on('disconnection', function disconnected(stream) {\n    this.connected--;\n    delete this.connections[stream.id];\n\n    log('disconnection: %s currently serving %d concurrent', stream.id, this.connected);\n  });\n\n  //\n  // Add our default middleware layers.\n  //\n  this.use('forwarded', require('./middleware/forwarded'));\n  this.use('cors', require('./middleware/access-control'));\n  this.use('primus.js', require('./middleware/primus'));\n  this.use('spec', require('./middleware/spec'));\n  this.use('x-xss', require('./middleware/xss'));\n  this.use('no-cache', require('./middleware/no-cache'));\n  this.use('authorization', require('./middleware/authorization'));\n\n  //\n  // Set the heartbeat interval.\n  //\n  if (options.pingInterval) {\n    this.heartbeatInterval = setInterval(\n      this.heartbeat.bind(this),\n      options.pingInterval\n    );\n  }\n\n  //\n  // Emit the initialised event after the next tick so we have some time to\n  // attach listeners.\n  //\n  process.nextTick(function tock() {\n    primus.emit('initialised', primus.transformer, primus.parser, options);\n  });\n});\n\n/**\n * Add a new authorization handler.\n *\n * @param {Function} auth The authorization handler.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('authorize', function authorize(auth) {\n  if ('function' !== typeof auth) {\n    throw new PrimusError('Authorize only accepts functions', this);\n  }\n\n  if (auth.length < 2) {\n    throw new PrimusError('Authorize function requires more arguments', this);\n  }\n\n  log('setting an authorization function');\n  this.auth = auth;\n  return this;\n});\n\n/**\n * Iterate over the connections.\n *\n * @param {Function} fn The function that is called every iteration.\n * @param {Function} done Optional callback, if you want to iterate asynchronously.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('forEach', function forEach(fn, done) {\n  if (!done) {\n    for (var id in this.connections) {\n      if (fn(this.spark(id), id, this.connections) === false) break;\n    }\n\n    return this;\n  }\n\n  var ids = Object.keys(this.connections)\n    , primus = this;\n\n  log('iterating over %d connections', ids.length);\n\n  function pushId(spark) {\n    ids.push(spark.id);\n  }\n\n  //\n  // We are going to iterate through the connections asynchronously so\n  // we should handle new connections as they come in.\n  //\n  primus.on('connection', pushId);\n\n  (function iterate() {\n    var id = ids.shift()\n      , spark;\n\n    if (!id) {\n      primus.removeListener('connection', pushId);\n      return done();\n    }\n\n    spark = primus.spark(id);\n\n    //\n    // The connection may have already been closed.\n    //\n    if (!spark) return iterate();\n\n    fn(spark, function next(err, forward) {\n      if (err || forward === false) {\n        primus.removeListener('connection', pushId);\n        return done(err);\n      }\n\n      iterate();\n    });\n  }());\n\n  return this;\n});\n\n/**\n * Send a ping packet to all clients to ensure that they are still connected.\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.readable('heartbeat', function heartbeat() {\n  this.forEach(function forEach(spark) {\n    spark.heartbeat();\n  });\n\n  return this;\n});\n\n/**\n * Broadcast the message to all connections.\n *\n * @param {Mixed} data The data you want to send.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('write', function write(data) {\n  this.forEach(function forEach(spark) {\n    spark.write(data);\n  });\n\n  return this;\n});\n\n/**\n * Install message parsers.\n *\n * @param {Mixed} parser Parse name or parser Object.\n * @returns {Primus}\n * @api private\n */\nPrimus.readable('parsers', function parsers(parser) {\n  parser = parser || 'json';\n\n  if ('string' === typeof parser) {\n    log('transformer `%s` is a string, attempting to resolve location', parser);\n    parser = parser.toLowerCase();\n    this.spec.parser = parser;\n\n    //\n    // This is a unknown parser, it could be people made a typo.\n    //\n    if (!(parser in Primus.parsers)) {\n      log('the supplied parser `%s` is not supported please use %s', parser, Primus.parsers);\n      throw new PrimusError(this.is(parser, Primus.parsers).unknown(), this);\n    }\n\n    try { parser = require('./parsers/'+ parser); }\n    catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND') {\n        log('the supplied parser `%s` is missing', parser);\n        throw new PrimusError(this.is(parser, Primus.parsers).missing(), this);\n      } else {\n        log(e);\n        throw e;\n      }\n    }\n  } else {\n    this.spec.parser = 'custom';\n  }\n\n  if ('object' !== typeof parser) {\n    throw new PrimusError('The given parser is not an Object', this);\n  }\n\n  this.encoder = parser.encoder;\n  this.decoder = parser.decoder;\n  this.parser = parser;\n\n  return this;\n});\n\n/**\n * Register a new message transformer. This allows you to easily manipulate incoming\n * and outgoing data which is particularity handy for plugins that want to send\n * meta data together with the messages.\n *\n * @param {String} type Incoming or outgoing\n * @param {Function} fn A new message transformer.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('transform', function transform(type, fn) {\n  if (!(type in this.transformers)) {\n    throw new PrimusError('Invalid transformer type', this);\n  }\n\n  if (~this.transformers[type].indexOf(fn)) {\n    log('the %s message transformer already exists, not adding it', type);\n    return this;\n  }\n\n  this.transformers[type].push(fn);\n  return this;\n});\n\n/**\n * Gets a spark by its id.\n *\n * @param {String} id The spark's id.\n * @returns {Spark}\n * @api private\n */\nPrimus.readable('spark', function spark(id) {\n  return this.connections[id];\n});\n\n/**\n * Generate a client library.\n *\n * @param {Boolean} nodejs Don't include the library, as we're running on Node.js.\n * @returns {String} The client library.\n * @api public\n */\nPrimus.readable('library', function compile(nodejs) {\n  var library = [ !nodejs ? this.transformer.library : null ]\n    , global = this.options.global || 'Primus'\n    , parser = this.parser.library || ''\n    , client = this.client;\n\n  //\n  // Add a simple export wrapper so it can be used as Node.js, AMD or browser\n  // client.\n  //\n  client = [\n    '(function UMDish(name, context, definition, plugins) {',\n    '  context[name] = definition.call(context);',\n    '  for (var i = 0; i < plugins.length; i++) {',\n    '    plugins[i](context[name])',\n    '  }',\n    '  if (typeof module !== \"undefined\" && module.exports) {',\n    '    module.exports = context[name];',\n    '  } else if (typeof define === \"function\" && define.amd) {',\n    '    define(function reference() { return context[name]; });',\n    '  }',\n    '})(\"'+ global +'\", this || {}, function wrapper() {',\n    '  var define, module, exports',\n    '    , Primus = '+ client.slice(client.indexOf('return ') + 7, -4) +';',\n    ''\n  ].join('\\n');\n\n  //\n  // Replace some basic content.\n  //\n  client = client\n    .replace('null; // @import {primus::pathname}', '\"'+ this.pathname.toString() +'\"')\n    .replace('null; // @import {primus::version}', '\"'+ this.version +'\"')\n    .replace('null; // @import {primus::client}', this.transformer.client.toString())\n    .replace('null; // @import {primus::auth}', (!!this.auth).toString())\n    .replace('null; // @import {primus::encoder}', this.encoder.toString())\n    .replace('null; // @import {primus::decoder}', this.decoder.toString());\n\n  //\n  // As we're given a `pingInterval` value on the server side, we need to update\n  // the `pingTimeout` on the client.\n  //\n  if (this.options.pingInterval) {\n    const value = this.options.pingInterval + Math.round(this.options.pingInterval / 2);\n\n    log('updating the default value of the client `pingTimeout` option');\n    client = client.replace(\n      'options.pingTimeout : 45e3;',\n      `options.pingTimeout : ${value};`\n    );\n  } else {\n    log('setting the default value of the client `pingTimeout` option to `false`');\n    client = client.replace(\n      'options.pingTimeout : 45e3;',\n      'options.pingTimeout : false;'\n    );\n  }\n\n  //\n  // Add the parser inside the closure, to prevent global leaking.\n  //\n  if (parser && parser.length) {\n    log('adding parser to the client file');\n    client += parser;\n  }\n\n  //\n  // Iterate over the parsers, and register the client side plugins. If there's\n  // a library bundled, add it the library array as there were some issues with\n  // frameworks that get included in module wrapper as it forces strict mode.\n  //\n  var name, plugin;\n\n  for (name in this.ark) {\n    plugin = this.ark[name];\n    name = JSON.stringify(name);\n\n    if (plugin.library) {\n      log('adding the library of the %s plugin to the client file', name);\n      library.push(plugin.library);\n    }\n\n    if (!plugin.client) continue;\n\n    log('adding the client code of the %s plugin to the client file', name);\n    client += 'Primus.prototype.ark['+ name +'] = '+ plugin.client.toString() +';\\n';\n  }\n\n  //\n  // Close the export wrapper and return the client. If we need to add\n  // a library, we should add them after we've created our closure and module\n  // exports. Some libraries seem to fail hard once they are wrapped in our\n  // closure so I'll rather expose a global variable instead of having to monkey\n  // patch too much code.\n  //\n  return client + [\n    '  return Primus;',\n    '},',\n    '['\n  ].concat(library.filter(Boolean).map(function expose(library) {\n    return [\n      'function (Primus) {',\n      library,\n      '}'\n    ].join('\\n');\n  }).join(',\\n'))\n  .concat(']);')\n  .join('\\n');\n});\n\n/**\n * Save the library to disk.\n *\n * @param {String} dir The location that we need to save the library.\n * @param {function} fn Optional callback, if you want an async save.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('save', function save(path, fn) {\n  if (!fn) fs.writeFileSync(path, this.library(), 'utf-8');\n  else fs.writeFile(path, this.library(), 'utf-8', fn);\n\n  return this;\n});\n\n/**\n * Register a new Primus plugin.\n *\n * ```js\n * primus.plugin('ack', {\n *   //\n *   // Only ran on the server.\n *   //\n *   server: function (primus, options) {\n *      // do stuff\n *   },\n *\n *   //\n *   // Runs on the client, it's automatically bundled.\n *   //\n *   client: function (primus, options) {\n *      // do client stuff\n *   },\n *\n *   //\n *   // Optional library that needs to be bundled on the client (should be a string)\n *   //\n *   library: ''\n * });\n * ```\n *\n * @param {String} name The name of the plugin.\n * @param {Object} energon The plugin that contains client and server extensions.\n * @returns {Mixed}\n * @api public\n */\nPrimus.readable('plugin', function plugin(name, energon) {\n  if (!name) return this.ark;\n\n  if (!energon) {\n    if ('string' === typeof name) return this.ark[name];\n    if ('object' === typeof name) {\n      energon = name;\n      name = energon.name;\n    }\n  }\n\n  if ('string' !== typeof name || !name) {\n    throw new PrimusError('Plugin name must be a non empty string', this);\n  }\n\n  if ('string' === typeof energon) {\n    log('plugin was passed as a string, attempting to require %s', energon);\n    energon = require(energon);\n  }\n\n  //\n  // Plugin accepts an object or a function only.\n  //\n  if (!/^(object|function)$/.test(typeof energon)) {\n    throw new PrimusError('Plugin should be an object or function', this);\n  }\n\n  //\n  // Plugin require a client, server or both to be specified in the object.\n  //\n  if (!energon.server && !energon.client) {\n    throw new PrimusError('Plugin is missing a client or server function', this);\n  }\n\n  //\n  // Don't allow duplicate plugins or plugin override as this is most likely\n  // unintentional.\n  //\n  if (name in this.ark) {\n    throw new PrimusError('Plugin name already defined', this);\n  }\n\n  log('adding %s as new plugin', name);\n  this.ark[name] = energon;\n  this.emit('plugin', name, energon);\n\n  if (!energon.server) return this;\n\n  log('calling the %s plugin\\'s server code', name);\n  energon.server.call(this, this, this.options);\n\n  return this;\n});\n\n/**\n * Remove plugin from the ark.\n *\n * @param {String} name Name of the plugin we need to remove from the ark.\n * @returns {Boolean} Successful removal of the plugin.\n * @api public\n */\nPrimus.readable('plugout', function plugout(name) {\n  if (!(name in this.ark)) return false;\n\n  this.emit('plugout', name, this.ark[name]);\n  delete this.ark[name];\n\n  return true;\n});\n\n/**\n * Add a new middleware layer. If no middleware name has been provided we will\n * attempt to take the name of the supplied function. If that fails, well fuck,\n * just random id it.\n *\n * @param {String} name The name of the middleware.\n * @param {Function} fn The middleware that's called each time.\n * @param {Object} options Middleware configuration.\n * @param {Number} level 0 based optional index for the middleware.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('use', function use(name, fn, options, level) {\n  if ('function' === typeof name) {\n    level = options;\n    options = fn;\n    fn = name;\n    name = fn.name || 'pid_'+ Date.now();\n  }\n\n  if (!level && 'number' === typeof options) {\n    level = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  //\n  // No or only 1 argument means that we need to initialise the middleware, this\n  // is a special initialisation process where we pass in a reference to the\n  // initialised Primus instance so a pre-compiling process can be done.\n  //\n  if (fn.length < 2) {\n    log('automatically configuring middleware `%s`', name);\n    fn = fn.call(this, options);\n  }\n\n  //\n  // Make sure that we have a function that takes at least 2 arguments.\n  //\n  if ('function' !== typeof fn || fn.length < 2) {\n    throw new PrimusError('Middleware should be a function that accepts at least 2 args');\n  }\n\n  var layer = {\n    length: fn.length,                // Amount of arguments indicates if it's async.\n    enabled: true,                    // Middleware is enabled by default.\n    name: name,                       // Used for lookups.\n    fn: fn                            // The actual middleware.\n  }, index = this.indexOfLayer(name);\n\n  //\n  // Override middleware layer if we already have a middleware layer with\n  // exactly the same name.\n  //\n  if (!~index) {\n    if (level >= 0 && level < this.layers.length) {\n      log('adding middleware `%s` to the supplied index at %d', name, level);\n      this.layers.splice(level, 0, layer);\n    } else {\n      this.layers.push(layer);\n    }\n  } else {\n    this.layers[index] = layer;\n  }\n\n  return this;\n});\n\n/**\n * Remove a middleware layer from the stack.\n *\n * @param {String} name The name of the middleware.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('remove', function remove(name) {\n  var index = this.indexOfLayer(name);\n\n  if (~index) {\n    log('removing middleware `%s`', name);\n    this.layers.splice(index, 1);\n  }\n\n  return this;\n});\n\n/**\n * Enable a given middleware layer.\n *\n * @param {String} name The name of the middleware.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('enable', function enable(name) {\n  var index = this.indexOfLayer(name);\n\n  if (~index) {\n    log('enabling middleware `%s`', name);\n    this.layers[index].enabled = true;\n  }\n  return this;\n});\n\n/**\n * Disable a given middleware layer.\n *\n * @param {String} name The name of the middleware.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('disable', function disable(name) {\n  var index = this.indexOfLayer(name);\n\n  if (~index) {\n    log('disabling middleware `%s`', name);\n    this.layers[index].enabled = false;\n  }\n\n  return this;\n});\n\n/**\n * Find the index of a given middleware layer by name.\n *\n * @param {String} name The name of the layer.\n * @returns {Number}\n * @api private\n */\nPrimus.readable('indexOfLayer', function indexOfLayer(name) {\n  for (var i = 0, length = this.layers.length; i < length; i++) {\n    if (this.layers[i].name === name) return i;\n  }\n\n  return -1;\n});\n\n/**\n * Destroy the created Primus instance.\n *\n * Options:\n * - close (boolean) Close the given server.\n * - reconnect (boolean) Trigger a client-side reconnect.\n * - timeout (number) Close all active connections after x milliseconds.\n *\n * @param {Object} options Destruction instructions.\n * @param {Function} fn Callback.\n * @returns {Primus}\n * @api public\n */\nPrimus.readable('destroy', function destroy(options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  options = options || {};\n  if (options.reconnect) options.close = true;\n\n  var primus = this;\n\n  clearInterval(primus.heartbeatInterval);\n\n  setTimeout(function close() {\n    var transformer = primus.transformer;\n\n    //\n    // Ensure that the transformer receives the `close` event only once.\n    //\n    if (transformer) transformer.ultron.destroy();\n\n    //\n    // Close the connections that are left open.\n    //\n    primus.forEach(function shutdown(spark) {\n      spark.end(undefined, { reconnect: options.reconnect });\n    });\n\n    if (options.close !== false) {\n      //\n      // Closing a server that isn't started yet would throw an error.\n      //\n      try {\n        primus.server.close(function closed() {\n          primus.close(options, fn);\n        });\n        return;\n      }\n      catch (e) {}\n    }\n\n    primus.close(options, fn);\n  }, +options.timeout || 0);\n\n  return this;\n});\n\n/**\n * Free resources after emitting a final `close` event.\n *\n * @param {Object} options Destruction instructions.\n * @param {Function} fn Callback.\n * @returns {Primus}\n * @api private\n */\nPrimus.readable('close', function close(options, fn) {\n  var primus = this;\n  //\n  // Emit a final `close` event before removing all the listeners\n  // from all the event emitters.\n  //\n  primus.asyncemit('close', options, function done(err) {\n    if (err) {\n      if (fn) return fn(err);\n      throw err;\n    }\n\n    var transformer = primus.transformer\n      , server = primus.server;\n\n    //\n    // If we don't have a server we are most likely destroying an already\n    // destroyed Primus instance.\n    //\n    if (!server) return fn && fn();\n\n    server.removeAllListeners('request');\n    server.removeAllListeners('upgrade');\n\n    //\n    // Re-add the original listeners so that the server can be used again.\n    //\n    transformer.listeners('previous::request').forEach(function add(listener) {\n      server.on('request', listener);\n    });\n    transformer.listeners('previous::upgrade').forEach(function add(listener) {\n      server.on('upgrade', listener);\n    });\n\n    transformer.emit('close', options);\n    transformer.removeAllListeners();\n\n    primus.removeAllListeners();\n\n    //\n    // Null some potentially heavy objects to free some more memory instantly.\n    //\n    primus.transformers.outgoing.length = primus.transformers.incoming.length = 0;\n    primus.transformer = primus.encoder = primus.decoder = primus.server = null;\n    primus.connected = 0;\n\n    primus.connections = Object.create(null);\n    primus.ark = Object.create(null);\n\n    if (fn) fn();\n  });\n\n  return this;\n});\n\n/**\n * Async emit an event. We make a really broad assumption here and that is they\n * have the same amount of arguments as the supplied arguments (excluding the\n * event name).\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.readable('asyncemit', require('asyncemit'));\n\n//\n// Alias for destroy.\n//\nPrimus.readable('end', Primus.prototype.destroy);\n\n/**\n * Checks if the given event is an emitted event by Primus.\n *\n * @param {String} evt The event name.\n * @returns {Boolean}\n * @api public\n */\nPrimus.readable('reserved', function reserved(evt) {\n  return (/^(incoming|outgoing)::/).test(evt)\n  || evt in reserved.events;\n});\n\n/**\n * The actual events that are used by Primus.\n *\n * @type {Object}\n * @api public\n */\nPrimus.prototype.reserved.events = {\n  'disconnection': 1,\n  'initialised': 1,\n  'connection': 1,\n  'plugout': 1,\n  'plugin': 1,\n  'close': 1,\n  'log': 1\n};\n\n/**\n * Add a createSocket interface so we can create a Server client with the\n * specified `transformer` and `parser`.\n *\n * ```js\n * var Socket = Primus.createSocket({ transformer: transformer, parser: parser })\n *   , socket = new Socket(url);\n * ```\n *\n * @param {Object} options The transformer / parser we need.\n * @returns {Socket}\n * @api public\n */\nPrimus.createSocket = function createSocket(options) {\n  options = options || {};\n\n  var primus = new Primus(new EventEmitter(), options);\n  return primus.Socket;\n};\n\n/**\n * Create a new Primus server.\n *\n * @param {Function} fn Request listener.\n * @param {Object} options Configuration.\n * @returns {Pipe}\n * @api public\n */\nPrimus.createServer = function createServer(fn, options) {\n  if ('object' === typeof fn) {\n    options = fn;\n    fn = null;\n  }\n\n  options = options || {};\n\n  var server = require('create-server')(Primus.prototype.merge.call(Primus, {\n    http: function warn() {\n      if (!options.iknowhttpsisbetter) [\n        '',\n        'We\\'ve detected that you\\'re using a HTTP instead of a HTTPS server.',\n        'Please be aware that real-time connections have less chance of being blocked',\n        'by firewalls and anti-virus scanners if they are encrypted (using SSL). If',\n        'you run your server behind a reverse and HTTPS terminating proxy ignore',\n        'this message, if not, you\\'ve been warned.',\n        ''\n      ].forEach(function each(line) {\n        console.log('primus: '+ line);\n      });\n    }\n  }, options));\n\n  //\n  // Now that we've got a server, we can setup the Primus and start listening.\n  //\n  var application = new Primus(server, options);\n\n  if (fn) application.on('connection', fn);\n  return application;\n};\n\n//\n// Expose the constructors of our Spark and Transformer so it can be extended by\n// a third party if needed.\n//\nPrimus.Transformer = Transformer;\nPrimus.Spark = Spark;\n\n//\n// Expose the module.\n//\nmodule.exports = Primus;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/errors.js":"'use strict';\n\nvar util = require('util');\n\n/**\n * Generic Primus error.\n *\n * @constructor\n * @param {String} message The reason for the error\n * @param {EventEmitter} logger Optional EventEmitter to emit a `log` event on.\n * @api public\n */\nfunction PrimusError(message, logger) {\n  Error.captureStackTrace(this, this.constructor);\n\n  this.message = message;\n  this.name = this.constructor.name;\n\n  if (logger) {\n    logger.emit('log', 'error', this);\n  }\n}\n\nutil.inherits(PrimusError, Error);\n\n/**\n * There was an error while parsing incoming or outgoing data.\n *\n * @param {String} message The reason for the error.\n * @param {Spark} spark The spark that caused the error.\n * @api public\n */\nfunction ParserError(message, spark) {\n  Error.captureStackTrace(this, this.constructor);\n\n  this.message = message;\n  this.name = this.constructor.name;\n\n  if (spark) {\n    if (spark.listeners('error').length) spark.emit('error', this);\n    spark.primus.emit('log', 'error', this);\n  }\n}\n\nutil.inherits(ParserError, Error);\n\n//\n// Expose our custom events.\n//\nexports.PrimusError = PrimusError;\nexports.ParserError = ParserError;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformer.js":"'use strict';\n\nvar log = require('diagnostics')('primus:transformer')\n  , middlewareError = require('./middleware/error')\n  , url = require('url').parse\n  , Ultron = require('ultron')\n  , fuse = require('fusing');\n\n/**\n * Transformer skeleton\n *\n * @constructor\n * @param {Primus} primus Reference to the Primus instance.\n * @api public\n */\nfunction Transformer(primus) {\n  this.fuse();\n\n  this.ultron = new Ultron(primus.server);  // Handles listeners with ease.\n  this.Spark = primus.Spark;                // Reference to the Spark constructor.\n  this.primus = primus;                     // Reference to the Primus instance.\n  this.service = null;                      // Stores the real-time service.\n\n  this.initialise();\n}\n\nfuse(Transformer, require('eventemitter3'));\n\n//\n// Simple logger shortcut.\n//\nObject.defineProperty(Transformer.prototype, 'logger', {\n  get: function logger() {\n    return {\n      error: this.primus.emits('log', 'error'), // Log error <line>.\n      warn:  this.primus.emits('log', 'warn'),  // Log warn <line>.\n      info:  this.primus.emits('log', 'info'),  // Log info <line>.\n      debug: this.primus.emits('log', 'debug'), // Log debug <line>.\n      log:   this.primus.emits('log', 'log'),   // Log log <line>.\n      plain: this.primus.emits('log', 'log')    // Log log <line>.\n    };\n  }\n});\n\n/**\n * Create the server and attach the appropriate event listeners.\n *\n * @api private\n */\nTransformer.readable('initialise', function initialise() {\n  if (this.server) this.server();\n\n  var server = this.primus.server\n    , transformer = this;\n\n  server.listeners('request').forEach(function each(fn) {\n    log('found existing request handlers on the HTTP server, moving Primus as first');\n    transformer.on('previous::request', fn, server);\n  });\n\n  server.listeners('upgrade').forEach(function each(fn) {\n    log('found existing upgrade handlers on the HTTP server, moving Primus as first');\n    transformer.on('previous::upgrade', fn, server);\n  });\n\n  //\n  // Remove the old listeners as we want to be the first request handler for all\n  // events.\n  //\n  server.removeAllListeners('request');\n  server.removeAllListeners('upgrade');\n\n  //\n  // Emit a close event.\n  //\n  this.ultron.on('close', function close() {\n    log('the HTTP server is closing');\n    transformer.emit('close');\n  });\n\n  //\n  // Start listening for incoming requests if we have a listener assigned to us.\n  //\n  if (this.listeners('request').length || this.listeners('previous::request').length) {\n    server.on('request', this.request.bind(this));\n  }\n\n  if (this.listeners('upgrade').length || this.listeners('previous::upgrade').length) {\n    server.on('upgrade', this.upgrade.bind(this));\n  }\n});\n\n/**\n * Iterate all the middleware layers that we're set on our Primus instance.\n *\n * @param {String} type Either `http` or `upgrade`\n * @param {Request} req HTTP request.\n * @param {Response} res HTTP response.\n * @param {Function} next Continuation callback.\n * @api private\n */\nTransformer.readable('forEach', function forEach(type, req, res, next) {\n  var transformer = this\n    , layers = transformer.primus.layers\n    , primus = transformer.primus;\n\n  req.query = req.uri.query || {};\n\n  //\n  // Add some silly HTTP properties for connect.js compatibility.\n  //\n  req.originalUrl = req.url;\n\n  if (!layers.length) {\n    next();\n    return transformer;\n  }\n\n  //\n  // Async or sync call the middleware layer.\n  //\n  (function iterate(index) {\n    var layer = layers[index++];\n\n    if (!layer) return next();\n    if (!layer.enabled || layer.fn[type] === false) return iterate(index);\n\n    if (layer.length === 2) {\n      log('executing middleware (%s) synchronously', layer.name);\n\n      if (layer.fn.call(primus, req, res)) return;\n      return iterate(index);\n    }\n\n    log('executing middleware (%s) asynchronously', layer.name);\n    layer.fn.call(primus, req, res, function done(err) {\n      if (err) return middlewareError(err, req, res);\n\n      iterate(index);\n    });\n  }(0));\n\n  return transformer;\n});\n\n/**\n * Start listening for incoming requests and check if we need to forward them to\n * the transformers.\n *\n * @param {Request} req HTTP request.\n * @param {Response} res HTTP response.\n * @api private\n */\nTransformer.readable('request', function request(req, res) {\n  if (!this.test(req)) return this.emit('previous::request', req, res);\n\n  req.headers['primus::req::backup'] = req;\n  res.once('end', function gc() {\n    delete req.headers['primus::req::backup'];\n  });\n\n  //\n  // I want to see you're face when you're looking at the lines of code above\n  // while you think, WTF what is this shit, you mad bro!? Let me take a moment\n  // to explain this mad and sadness.\n  //\n  // There are some real-time transformers that do not give us access to the\n  // HTTP request that initiated their `socket` connection. They only give us\n  // access to the information that they think is useful, we're greedy, we want\n  // everything and let developers decide what they want to use instead and\n  // therefor want to expose this HTTP request on our `spark` object.\n  //\n  // The reason it's added to the headers is because it's currently the only\n  // field that is accessible through all transformers.\n  //\n\n  log('handling HTTP request for url: %s', req.url);\n  this.forEach('http', req, res, this.emits('request', req, res));\n});\n\n/**\n * Starting listening for incoming upgrade requests and check if we need to\n * forward them to the transformers.\n *\n * @param {Request} req HTTP request.\n * @param {Socket} socket Socket.\n * @param {Buffer} head Buffered data.\n * @api private\n */\nTransformer.readable('upgrade', function upgrade(req, socket, head) {\n  if (!this.test(req)) return this.emit('previous::upgrade', req, socket, head);\n\n  //\n  // See Transformer#request for an explanation of this madness.\n  //\n  req.headers['primus::req::backup'] = req;\n  socket.once('end', function gc() {\n    delete req.headers['primus::req::backup'];\n  });\n\n  log('handling HTTP upgrade for url: %s', req.url);\n  this.forEach('upgrade', req, socket, this.emits('upgrade', req, socket, head));\n});\n\n/**\n * Check if we should accept this request.\n *\n * @param {Request} req HTTP Request.\n * @returns {Boolean} Do we need to accept this request.\n * @api private\n */\nTransformer.readable('test', function test(req) {\n  req.uri = url(req.url, true);\n\n  var pathname = req.uri.pathname || '/'\n    , route = this.primus.pathname;\n\n  return pathname.slice(0, route.length) === route;\n});\n\n//\n// Expose the transformer's skeleton.\n//\nmodule.exports = Transformer;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/error.js":"'use strict';\n\n/**\n * WARNING: this middleware is only used internally and does not follow the\n * pattern of the other middleware. You should not use it.\n *\n * Handle async middleware errors.\n *\n * @param {Error} err Error returned by the middleware.\n * @param {Request} req HTTP request.\n * @param {Response} res HTTP response.\n * @api private\n */\nmodule.exports = function error(err, req, res) {\n  var message = JSON.stringify({ error: err.message || err })\n    , length = Buffer.byteLength(message)\n    , code = err.statusCode || 500;\n\n  //\n  // As in the authorization middleware we need to handle two cases here:\n  // regular HTTP requests and upgrade requests.\n  //\n  if (res.setHeader) {\n    res.statusCode = code;\n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Length', length);\n\n    return res.end(message);\n  }\n\n  res.write('HTTP/'+ req.httpVersion +' ');\n  res.write(code +' '+ require('http').STATUS_CODES[code] +'\\r\\n');\n  res.write('Connection: close\\r\\n');\n  res.write('Content-Type: application/json\\r\\n');\n  res.write('Content-Length: '+ length +'\\r\\n');\n  res.write('\\r\\n');\n  res.write(message);\n  res.destroy();\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/spark.js":"'use strict';\n\nvar ParserError = require('./errors').ParserError\n  , log = require('diagnostics')('primus:spark')\n  , parse = require('querystring').parse\n  , forwarded = require('forwarded-for')\n  , Ultron = require('ultron')\n  , fuse = require('fusing')\n  , yeast = require('yeast')\n  , u2028 = /\\u2028/g\n  , u2029 = /\\u2029/g;\n\n/**\n * The Spark is an indefinable, indescribable energy or soul of a transformer\n * which can be used to create new transformers. In our case, it's a simple\n * wrapping interface.\n *\n * @constructor\n * @param {Primus} primus Reference to the Primus server. (Set using .bind)\n * @param {Object} headers The request headers for this connection.\n * @param {Object} address The object that holds the remoteAddress and port.\n * @param {Object} query The query string of request.\n * @param {String} id An optional id of the socket, or we will generate one.\n * @param {Request} request The HTTP Request instance that initialised the spark.\n * @api public\n */\nfunction Spark(primus, headers, address, query, id, request) {\n  this.fuse();\n\n  var writable = this.writable\n    , spark = this;\n\n  query = query || {};\n  id = id || yeast();\n  headers = headers || {};\n  address = address || {};\n  request = request || headers['primus::req::backup'];\n\n  writable('id', id);                   // Unique id for socket.\n  writable('primus', primus);           // References to Primus.\n  writable('remote', address);          // The remote address location.\n  writable('headers', headers);         // The request headers.\n  writable('request', request);         // Reference to an HTTP request.\n  writable('writable', true);           // Silly stream compatibility.\n  writable('readable', true);           // Silly stream compatibility.\n  writable('queue', []);                // Data queue for data events.\n  writable('query', query);             // The query string.\n  writable('ultron', new Ultron(this)); // Our event listening cleanup.\n  writable('alive', true);              // Flag used to detect zombie sparks.\n\n  //\n  // Parse our query string.\n  //\n  if ('string' === typeof this.query) {\n    this.query = parse(this.query);\n  }\n\n  this.__initialise.forEach(function execute(initialise) {\n    initialise.call(spark);\n  });\n}\n\nfuse(Spark, require('stream'), { merge: false, mixin: false });\n\n//\n// Internal readyState's to prevent writes against close sockets.\n//\nSpark.OPENING = 1;    // Only here for primus.js readyState number compatibility.\nSpark.CLOSED  = 2;    // The connection is closed.\nSpark.OPEN    = 3;    // The connection is open.\n\n//\n// Make sure that we emit `readyState` change events when a new readyState is\n// checked. This way plugins can correctly act according to this.\n//\nSpark.readable('readyState', {\n  get: function get() {\n    return this.__readyState;\n  },\n  set: function set(readyState) {\n    if (this.__readyState === readyState) return readyState;\n\n    this.__readyState = readyState;\n    this.emit('readyStateChange');\n\n    return readyState;\n  }\n}, true);\n\nSpark.writable('__readyState', Spark.OPEN);\n\n//\n// Lazy parse interface for IP address information. As nobody is always\n// interested in this, we're going to defer parsing until it's actually needed.\n//\nSpark.get('address', function address() {\n  return this.request.forwarded || forwarded(this.remote, this.headers, this.primus.whitelist);\n});\n\n/**\n * Checks if the given event is an emitted event by Primus.\n *\n * @param {String} evt The event name.\n * @returns {Boolean}\n * @api public\n */\nSpark.readable('reserved', function reserved(evt) {\n  return (/^(incoming|outgoing)::/).test(evt)\n  || evt in reserved.events;\n});\n\n/**\n * The actual events that are used by the Spark.\n *\n * @type {Object}\n * @api public\n */\nSpark.prototype.reserved.events = {\n  readyStateChange: 1,\n  heartbeat: 1,\n  error: 1,\n  data: 1,\n  end: 1\n};\n\n/**\n * Allows for adding initialise listeners without people overriding our default\n * initializer. If they are feeling adventures and really want want to hack it\n * up, they can remove it from the __initialise array.\n *\n * @returns {Function} The last added initialise hook.\n * @api public\n */\nSpark.readable('initialise', {\n  get: function get() {\n    return this.__initialise[this.__initialise.length - 1];\n  },\n\n  set: function set(initialise) {\n    if ('function' === typeof initialise) this.__initialise.push(initialise);\n  }\n}, true);\n\n/**\n * Send a heartbeat to the client.\n *\n * Checks if any message has been received from the client before sending\n * another heartbeat. If not, we can assume it's dead (no response to our last\n * ping), so we should close.\n *\n * This is intentionally writable so it can be overwritten for custom heartbeat\n * policies.\n *\n * @returns {undefined}\n * @api public\n */\nSpark.writable('heartbeat', function heartbeat() {\n  var spark = this;\n  if (!spark.alive) {\n    //\n    // Set the `reconnect` option to `true` so we don't send a\n    // `primus::server::close` packet to an already broken connection.\n    //\n    spark.end(undefined, { reconnect: true });\n  } else {\n    const now = Date.now();\n\n    spark.alive = false;\n    spark.emit('outgoing::ping', now);\n    spark._write(`primus::ping::${now}`);\n  }\n});\n\n/**\n * Attach hooks and automatically announce a new connection.\n *\n * @type {Array}\n * @api private\n */\nSpark.readable('__initialise', [function initialise() {\n  var primus = this.primus\n    , ultron = this.ultron\n    , spark = this;\n\n  //\n  // Prevent double initialization of the spark. If we already have an\n  // `incoming::data` handler we assume that all other cases are handled as well.\n  //\n  if (this.listeners('incoming::data').length) {\n    return log('already has incoming::data listeners, bailing out');\n  }\n\n  //\n  // We've received new data from our client, decode and emit it.\n  //\n  ultron.on('incoming::data', function message(raw) {\n    primus.decoder.call(spark, raw, function decoding(err, data) {\n      //\n      // Do a \"save\" emit('error') when we fail to parse a message. We don't\n      // want to throw here as listening to errors should be optional.\n      //\n      if (err) {\n        log('failed to decode the incoming data for %s', spark.id);\n        return new ParserError('Failed to decode incoming data: '+ err.message, spark, err);\n      }\n\n      //\n      // Handle \"primus::\" prefixed protocol messages.\n      //\n      if (spark.protocol(data)) return;\n\n      spark.transforms(primus, spark, 'incoming', data, raw);\n    });\n  });\n\n  //\n  // We've received a pong event. This is fired upon receipt of a\n  // `pimus::pong::<timestamp>` message.\n  //\n  ultron.on('incoming::pong', function pong() {\n    spark.alive = true;\n    spark.emit('heartbeat');\n  });\n\n  //\n  // The client has disconnected.\n  //\n  ultron.on('incoming::end', function disconnect() {\n    //\n    // The socket is closed, sending data over it will throw an error.\n    //\n    log('transformer closed connection for %s', spark.id);\n    spark.end(undefined, { reconnect: true });\n  });\n\n  ultron.on('incoming::error', function error(err) {\n    //\n    // Ensure that the error we emit is always an Error instance. There are\n    // transformers that used to emit only strings. A string is not an Error.\n    //\n    if ('string' === typeof err) {\n      err = new Error(err);\n    }\n\n    if (spark.listeners('error').length) spark.emit('error', err);\n    spark.primus.emit('log', 'error', err);\n\n    log('transformer received error `%s` for %s', err.message, spark.id);\n    spark.end();\n  });\n\n  //\n  // End is triggered by both incoming and outgoing events.\n  //\n  ultron.on('end', function end() {\n    primus.emit('disconnection', spark);\n  });\n\n  //\n  // Announce a new connection. This allows the transformers to change or listen\n  // to events before we announce it.\n  //\n  process.nextTick(function tick() {\n    primus.asyncemit('connection', spark, function damn(err) {\n      if (!err) {\n        if (spark.queue) spark.queue.forEach(function each(packet) {\n          spark.emit('data', packet.data, packet.raw);\n        });\n\n        spark.queue = null;\n        return;\n      }\n\n      spark.emit('incoming::error', err);\n    });\n  });\n}]);\n\n/**\n * Execute the set of message transformers from Primus on the incoming or\n * outgoing message.\n * This function and it's content should be in sync with Primus#transforms in\n * primus.js.\n *\n * @param {Primus} primus Reference to the Primus instance with message transformers.\n * @param {Spark|Primus} connection Connection that receives or sends data.\n * @param {String} type The type of message, 'incoming' or 'outgoing'.\n * @param {Mixed} data The data to send or that has been received.\n * @param {String} raw The raw encoded data.\n * @returns {Spark}\n * @api public\n */\nSpark.readable('transforms', function transforms(primus, connection, type, data, raw) {\n  var packet = { data: data, raw: raw }\n    , fns = primus.transformers[type];\n\n  //\n  // Iterate in series over the message transformers so we can allow optional\n  // asynchronous execution of message transformers which could for example\n  // retrieve additional data from the server, do extra decoding or even\n  // message validation.\n  //\n  (function transform(index, done) {\n    var transformer = fns[index++];\n\n    if (!transformer) return done();\n\n    if (1 === transformer.length) {\n      if (false === transformer.call(connection, packet)) {\n        //\n        // When false is returned by an incoming transformer it means that's\n        // being handled by the transformer and we should not emit the `data`\n        // event.\n        //\n        return;\n      }\n\n      return transform(index, done);\n    }\n\n    transformer.call(connection, packet, function finished(err, arg) {\n      if (err) return connection.emit('error', err);\n      if (false === arg) return;\n\n      transform(index, done);\n    });\n  }(0, function done() {\n    //\n    // We always emit 2 arguments for the data event, the first argument is the\n    // parsed data and the second argument is the raw string that we received.\n    // This allows you, for example, to do some validation on the parsed data\n    // and then save the raw string in your database without the stringify\n    // overhead.\n    //\n    if ('incoming' === type) {\n      //\n      // This is pretty bad edge case, it's possible that the async version of\n      // the `connection` event listener takes so long that we cannot assign\n      // `data` handlers and we are already receiving data as the connection is\n      // already established. In this edge case we need to queue the data and\n      // pass it to the data event once we're listening.\n      //\n      if (connection.queue) return connection.queue.push(packet);\n      return connection.emit('data', packet.data, packet.raw);\n    }\n\n    connection._write(packet.data);\n  }));\n\n  return this;\n});\n\n/**\n * Really dead simple protocol parser. We simply assume that every message that\n * is prefixed with `primus::` could be used as some sort of protocol definition\n * for Primus.\n *\n * @param {String} msg The data.\n * @returns {Boolean} Is a protocol message.\n * @api private\n */\nSpark.readable('protocol', function protocol(msg) {\n  if (\n       'string' !== typeof msg\n    || msg.indexOf('primus::') !== 0\n  ) return false;\n\n  var last = msg.indexOf(':', 8)\n    , value = msg.slice(last + 2);\n\n  switch (msg.slice(8,  last)) {\n    case 'pong':\n      this.emit('incoming::pong', +value);\n      break;\n\n    case 'id':\n      this._write('primus::id::'+ this.id);\n      break;\n\n    //\n    // Unknown protocol, somebody is probably sending `primus::` prefixed\n    // messages.\n    //\n    default:\n      log('message `%s` was prefixed with primus:: but not supported', msg);\n      return false;\n  }\n\n  log('processed a primus protocol message `%s`', msg);\n  return true;\n});\n\n/**\n * Send a new message to a given spark.\n *\n * @param {Mixed} data The data that needs to be written.\n * @returns {Boolean} Always returns true.\n * @api public\n */\nSpark.readable('write', function write(data) {\n  var primus = this.primus;\n\n  //\n  // The connection is closed, return false.\n  //\n  if (Spark.CLOSED === this.readyState) {\n    log('attempted to write but readyState was already set to CLOSED for %s', this.id);\n    return false;\n  }\n\n  this.transforms(primus, this, 'outgoing', data);\n\n  return true;\n});\n\n/**\n * The actual message writer.\n *\n * @param {Mixed} data The message that needs to be written.\n * @returns {Boolean}\n * @api private\n */\nSpark.readable('_write', function _write(data) {\n  var primus = this.primus\n    , spark = this;\n\n  //\n  // The connection is closed, normally this would already be done in the\n  // `spark.write` method, but as `_write` is used internally, we should also\n  // add the same check here to prevent potential crashes by writing to a dead\n  // socket.\n  //\n  if (Spark.CLOSED === spark.readyState) {\n    log('attempted to _write but readyState was already set to CLOSED for %s', spark.id);\n    return false;\n  }\n\n  primus.encoder.call(spark, data, function encoded(err, packet) {\n    //\n    // Do a \"safe\" emit('error') when we fail to parse a message. We don't\n    // want to throw here as listening to errors should be optional.\n    //\n    if (err) return new ParserError('Failed to encode outgoing data: '+ err.message, spark, err);\n    if (!packet) return log('nothing to write, bailing out for %s', spark.id);\n\n    //\n    // Hack 1: \\u2028 and \\u2029 are allowed inside a JSON string, but JavaScript\n    // defines them as newline separators. Unescaped control characters are not\n    // allowed inside JSON strings, so this causes an error at parse time. We\n    // work around this issue by escaping these characters. This can cause\n    // errors with JSONP requests or if the string is just evaluated.\n    //\n    if ('string' === typeof packet) {\n      if (~packet.indexOf('\\u2028')) packet = packet.replace(u2028, '\\\\u2028');\n      if (~packet.indexOf('\\u2029')) packet = packet.replace(u2029, '\\\\u2029');\n    }\n\n    spark.emit('outgoing::data', packet);\n  });\n\n  return true;\n});\n\n/**\n * End the connection.\n *\n * Options:\n * - reconnect (boolean) Trigger client-side reconnect.\n *\n * @param {Mixed} data Optional closing data.\n * @param {Object} options End instructions.\n * @api public\n */\nSpark.readable('end', function end(data, options) {\n  if (Spark.CLOSED === this.readyState) return this;\n\n  options = options || {};\n  if (data !== undefined) this.write(data);\n\n  //\n  // If we want to trigger a reconnect do not send\n  // `primus::server::close`, otherwise bypass the .write method\n  // as this message should not be transformed.\n  //\n  if (!options.reconnect) this._write('primus::server::close');\n\n  //\n  // This seems redundant but there are cases where the above writes\n  // can trigger another `end` call. An example is with Engine.IO\n  // when calling `end` on the client and `end` on the spark right\n  // after. The `end` call on the spark comes before the `incoming::end`\n  // event and the result is an attempt of writing to a closed socket.\n  // When this happens Engine.IO closes the connection and without\n  // this check the following instructions could be executed twice.\n  //\n  if (Spark.CLOSED === this.readyState) return this;\n\n  log('emitting final events for spark %s', this.id);\n\n  this.readyState = Spark.CLOSED;\n  this.emit('outgoing::end');\n  this.emit('end');\n  this.ultron.destroy();\n  this.ultron = this.queue = null;\n\n  return this;\n});\n\n//\n// Expose the module.\n//\nmodule.exports = Spark;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/primus.js":"/*globals require, define */\n'use strict';\n\nvar EventEmitter = require('eventemitter3')\n  , TickTock = require('tick-tock')\n  , Recovery = require('recovery')\n  , qs = require('querystringify')\n  , inherits = require('inherits')\n  , destroy = require('demolish')\n  , yeast = require('yeast')\n  , u2028 = /\\u2028/g\n  , u2029 = /\\u2029/g;\n\n/**\n * Context assertion, ensure that some of our public Primus methods are called\n * with the correct context to ensure that\n *\n * @param {Primus} self The context of the function.\n * @param {String} method The method name.\n * @api private\n */\nfunction context(self, method) {\n  if (self instanceof Primus) return;\n\n  var failure = new Error('Primus#'+ method + '\\'s context should called with a Primus instance');\n\n  if ('function' !== typeof self.listeners || !self.listeners('error').length) {\n    throw failure;\n  }\n\n  self.emit('error', failure);\n}\n\n//\n// Sets the default connection URL, it uses the default origin of the browser\n// when supported but degrades for older browsers. In Node.js, we cannot guess\n// where the user wants to connect to, so we just default to localhost.\n//\nvar defaultUrl;\n\ntry {\n  if (location.origin) {\n    defaultUrl = location.origin;\n  } else {\n    defaultUrl = location.protocol +'//'+ location.host;\n  }\n} catch (e) {\n  defaultUrl = 'http://127.0.0.1';\n}\n\n/**\n * Primus is a real-time library agnostic framework for establishing real-time\n * connections with servers.\n *\n * Options:\n * - reconnect, configuration for the reconnect process.\n * - manual, don't automatically call `.open` to start the connection.\n * - websockets, force the use of WebSockets, even when you should avoid them.\n * - timeout, connect timeout, server didn't respond in a timely manner.\n * - pingTimeout, The maximum amount of time to wait for the server to send a ping.\n * - network, Use network events as leading method for network connection drops.\n * - strategy, Reconnection strategies.\n * - transport, Transport options.\n * - url, uri, The URL to use connect with the server.\n *\n * @constructor\n * @param {String} url The URL of your server.\n * @param {Object} options The configuration.\n * @api public\n */\nfunction Primus(url, options) {\n  if (!(this instanceof Primus)) return new Primus(url, options);\n\n  Primus.Stream.call(this);\n\n  if ('function' !== typeof this.client) {\n    return this.critical(new Error(\n      'The client library has not been compiled correctly, see '+\n      'https://github.com/primus/primus#client-library for more details'\n    ));\n  }\n\n  if ('object' === typeof url) {\n    options = url;\n    url = options.url || options.uri || defaultUrl;\n  } else {\n    options = options || {};\n  }\n\n  if ('ping' in options || 'pong' in options) {\n    return this.critical(new Error(\n      'The `ping` and `pong` options have been removed'\n    ));\n  }\n\n  var primus = this;\n\n  // The maximum number of messages that can be placed in queue.\n  options.queueSize = 'queueSize' in options ? options.queueSize : Infinity;\n\n  // Connection timeout duration.\n  options.timeout = 'timeout' in options ? options.timeout : 10e3;\n\n  // Stores the back off configuration.\n  options.reconnect = 'reconnect' in options ? options.reconnect : {};\n\n  // Heartbeat ping interval.\n  options.pingTimeout = 'pingTimeout' in options ? options.pingTimeout : 45e3;\n\n  // Reconnect strategies.\n  options.strategy = 'strategy' in options ? options.strategy : [];\n\n  // Custom transport options.\n  options.transport = 'transport' in options ? options.transport : {};\n\n  primus.buffer = [];                           // Stores premature send data.\n  primus.writable = true;                       // Silly stream compatibility.\n  primus.readable = true;                       // Silly stream compatibility.\n  primus.url = primus.parse(url || defaultUrl); // Parse the URL to a readable format.\n  primus.readyState = Primus.CLOSED;            // The readyState of the connection.\n  primus.options = options;                     // Reference to the supplied options.\n  primus.timers = new TickTock(this);           // Contains all our timers.\n  primus.socket = null;                         // Reference to the internal connection.\n  primus.latency = 0;                           // Latency between messages.\n  primus.disconnect = false;                    // Did we receive a disconnect packet?\n  primus.transport = options.transport;         // Transport options.\n  primus.transformers = {                       // Message transformers.\n    outgoing: [],\n    incoming: []\n  };\n\n  //\n  // Create our reconnection instance.\n  //\n  primus.recovery = new Recovery(options.reconnect);\n\n  //\n  // Parse the reconnection strategy. It can have the following strategies:\n  //\n  // - timeout: Reconnect when we have a network timeout.\n  // - disconnect: Reconnect when we have an unexpected disconnect.\n  // - online: Reconnect when we're back online.\n  //\n  if ('string' === typeof options.strategy) {\n    options.strategy = options.strategy.split(/\\s?\\,\\s?/g);\n  }\n\n  if (false === options.strategy) {\n    //\n    // Strategies are disabled, but we still need an empty array to join it in\n    // to nothing.\n    //\n    options.strategy = [];\n  } else if (!options.strategy.length) {\n    options.strategy.push('disconnect', 'online');\n\n    //\n    // Timeout based reconnection should only be enabled conditionally. When\n    // authorization is enabled it could trigger.\n    //\n    if (!this.authorization) options.strategy.push('timeout');\n  }\n\n  options.strategy = options.strategy.join(',').toLowerCase();\n\n  //\n  // Force the use of WebSockets, even when we've detected some potential\n  // broken WebSocket implementation.\n  //\n  if ('websockets' in options) {\n    primus.AVOID_WEBSOCKETS = !options.websockets;\n  }\n\n  //\n  // Force or disable the use of NETWORK events as leading client side\n  // disconnection detection.\n  //\n  if ('network' in options) {\n    primus.NETWORK_EVENTS = options.network;\n  }\n\n  //\n  // Check if the user wants to manually initialise a connection. If they don't,\n  // we want to do it after a really small timeout so we give the users enough\n  // time to listen for `error` events etc.\n  //\n  if (!options.manual) primus.timers.setTimeout('open', function open() {\n    primus.timers.clear('open');\n    primus.open();\n  }, 0);\n\n  primus.initialise(options);\n}\n\n/**\n * Simple require wrapper to make browserify, node and require.js play nice.\n *\n * @param {String} name The module to require.\n * @returns {Object|Undefined} The module that we required.\n * @api private\n */\nPrimus.requires = Primus.require = function requires(name) {\n  if ('function' !== typeof require) return undefined;\n\n  return !('function' === typeof define && define.amd)\n    ? require(name)\n    : undefined;\n};\n\n//\n// It's possible that we're running in Node.js or in a Node.js compatible\n// environment. In this cases we try to inherit from the Stream base class.\n//\ntry {\n  Primus.Stream = Primus.requires('stream');\n} catch (e) { }\n\nif (!Primus.Stream) Primus.Stream = EventEmitter;\n\ninherits(Primus, Primus.Stream);\n\n/**\n * Primus readyStates, used internally to set the correct ready state.\n *\n * @type {Number}\n * @private\n */\nPrimus.OPENING = 1;   // We're opening the connection.\nPrimus.CLOSED  = 2;   // No active connection.\nPrimus.OPEN    = 3;   // The connection is open.\n\n/**\n * Are we working with a potentially broken WebSockets implementation? This\n * boolean can be used by transformers to remove `WebSockets` from their\n * supported transports.\n *\n * @type {Boolean}\n * @private\n */\nPrimus.prototype.AVOID_WEBSOCKETS = false;\n\n/**\n * Some browsers support registering emitting `online` and `offline` events when\n * the connection has been dropped on the client. We're going to detect it in\n * a simple `try {} catch (e) {}` statement so we don't have to do complicated\n * feature detection.\n *\n * @type {Boolean}\n * @private\n */\nPrimus.prototype.NETWORK_EVENTS = false;\nPrimus.prototype.online = true;\n\ntry {\n  if (\n       Primus.prototype.NETWORK_EVENTS = 'onLine' in navigator\n    && (window.addEventListener || document.body.attachEvent)\n  ) {\n    if (!navigator.onLine) {\n      Primus.prototype.online = false;\n    }\n  }\n} catch (e) { }\n\n/**\n * The Ark contains all our plugins definitions. It's namespaced by\n * name => plugin.\n *\n * @type {Object}\n * @private\n */\nPrimus.prototype.ark = {};\n\n/**\n * Simple emit wrapper that returns a function that emits an event once it's\n * called. This makes it easier for transports to emit specific events.\n *\n * @returns {Function} A function that will emit the event when called.\n * @api public\n */\nPrimus.prototype.emits = require('emits');\n\n/**\n * Return the given plugin.\n *\n * @param {String} name The name of the plugin.\n * @returns {Object|undefined} The plugin or undefined.\n * @api public\n */\nPrimus.prototype.plugin = function plugin(name) {\n  context(this, 'plugin');\n\n  if (name) return this.ark[name];\n\n  var plugins = {};\n\n  for (name in this.ark) {\n    plugins[name] = this.ark[name];\n  }\n\n  return plugins;\n};\n\n/**\n * Checks if the given event is an emitted event by Primus.\n *\n * @param {String} evt The event name.\n * @returns {Boolean} Indication of the event is reserved for internal use.\n * @api public\n */\nPrimus.prototype.reserved = function reserved(evt) {\n  return (/^(incoming|outgoing)::/).test(evt)\n  || evt in this.reserved.events;\n};\n\n/**\n * The actual events that are used by the client.\n *\n * @type {Object}\n * @public\n */\nPrimus.prototype.reserved.events = {\n  'reconnect scheduled': 1,\n  'reconnect timeout': 1,\n  'readyStateChange': 1,\n  'reconnect failed': 1,\n  'reconnected': 1,\n  'reconnect': 1,\n  'offline': 1,\n  'timeout': 1,\n  'destroy': 1,\n  'online': 1,\n  'error': 1,\n  'close': 1,\n  'open': 1,\n  'data': 1,\n  'end': 1\n};\n\n/**\n * Initialise the Primus and setup all parsers and internal listeners.\n *\n * @param {Object} options The original options object.\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.initialise = function initialise(options) {\n  var primus = this\n    , start;\n\n  primus.recovery\n  .on('reconnected', primus.emits('reconnected'))\n  .on('reconnect failed', primus.emits('reconnect failed', function failed(next) {\n    primus.emit('end');\n    next();\n  }))\n  .on('reconnect timeout', primus.emits('reconnect timeout'))\n  .on('reconnect scheduled', primus.emits('reconnect scheduled'))\n  .on('reconnect', primus.emits('reconnect', function reconnect(next) {\n    primus.emit('outgoing::reconnect');\n    next();\n  }));\n\n  primus.on('outgoing::open', function opening() {\n    var readyState = primus.readyState;\n\n    primus.readyState = Primus.OPENING;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'opening');\n    }\n\n    start = +new Date();\n  });\n\n  primus.on('incoming::open', function opened() {\n    var readyState = primus.readyState;\n\n    if (primus.recovery.reconnecting()) {\n      primus.recovery.reconnected();\n    }\n\n    //\n    // The connection has been opened so we should set our state to\n    // (writ|read)able so our stream compatibility works as intended.\n    //\n    primus.writable = true;\n    primus.readable = true;\n\n    //\n    // Make sure we are flagged as `online` as we've successfully opened the\n    // connection.\n    //\n    if (!primus.online) {\n      primus.online = true;\n      primus.emit('online');\n    }\n\n    primus.readyState = Primus.OPEN;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'open');\n    }\n\n    primus.heartbeat();\n\n    if (primus.buffer.length) {\n      var data = primus.buffer.slice()\n        , length = data.length\n        , i = 0;\n\n      primus.buffer.length = 0;\n\n      for (; i < length; i++) {\n        primus._write(data[i]);\n      }\n    }\n\n    primus.emit('open');\n  });\n\n  primus.on('incoming::ping', function ping(time) {\n    primus.online = true;\n    primus.heartbeat();\n    primus.emit('outgoing::pong', time);\n    primus._write('primus::pong::'+ time);\n  });\n\n  primus.on('incoming::error', function error(e) {\n    var connect = primus.timers.active('connect')\n      , err = e;\n\n    //\n    // When the error is not an Error instance we try to normalize it.\n    //\n    if ('string' === typeof e) {\n      err = new Error(e);\n    } else if (!(e instanceof Error) && 'object' === typeof e) {\n      //\n      // BrowserChannel and SockJS returns an object which contains some\n      // details of the error. In order to have a proper error we \"copy\" the\n      // details in an Error instance.\n      //\n      err = new Error(e.message || e.reason);\n      for (var key in e) {\n        if (Object.prototype.hasOwnProperty.call(e, key))\n          err[key] = e[key];\n      }\n    }\n    //\n    // We're still doing a reconnect attempt, it could be that we failed to\n    // connect because the server was down. Failing connect attempts should\n    // always emit an `error` event instead of a `open` event.\n    //\n    //\n    if (primus.recovery.reconnecting()) return primus.recovery.reconnected(err);\n    if (primus.listeners('error').length) primus.emit('error', err);\n\n    //\n    // We received an error while connecting, this most likely the result of an\n    // unauthorized access to the server.\n    //\n    if (connect) {\n      if (~primus.options.strategy.indexOf('timeout')) {\n        primus.recovery.reconnect();\n      } else {\n        primus.end();\n      }\n    }\n  });\n\n  primus.on('incoming::data', function message(raw) {\n    primus.decoder(raw, function decoding(err, data) {\n      //\n      // Do a \"safe\" emit('error') when we fail to parse a message. We don't\n      // want to throw here as listening to errors should be optional.\n      //\n      if (err) return primus.listeners('error').length && primus.emit('error', err);\n\n      //\n      // Handle all \"primus::\" prefixed protocol messages.\n      //\n      if (primus.protocol(data)) return;\n      primus.transforms(primus, primus, 'incoming', data, raw);\n    });\n  });\n\n  primus.on('incoming::end', function end() {\n    var readyState = primus.readyState;\n\n    //\n    // This `end` started with the receiving of a primus::server::close packet\n    // which indicated that the user/developer on the server closed the\n    // connection and it was not a result of a network disruption. So we should\n    // kill the connection without doing a reconnect.\n    //\n    if (primus.disconnect) {\n      primus.disconnect = false;\n\n      return primus.end();\n    }\n\n    //\n    // Always set the readyState to closed, and if we're still connecting, close\n    // the connection so we're sure that everything after this if statement block\n    // is only executed because our readyState is set to `open`.\n    //\n    primus.readyState = Primus.CLOSED;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'end');\n    }\n\n    if (primus.timers.active('connect')) primus.end();\n    if (readyState !== Primus.OPEN) {\n      return primus.recovery.reconnecting()\n        ? primus.recovery.reconnect()\n        : false;\n    }\n\n    this.writable = false;\n    this.readable = false;\n\n    //\n    // Clear all timers in case we're not going to reconnect.\n    //\n    this.timers.clear();\n\n    //\n    // Fire the `close` event as an indication of connection disruption.\n    // This is also fired by `primus#end` so it is emitted in all cases.\n    //\n    primus.emit('close');\n\n    //\n    // The disconnect was unintentional, probably because the server has\n    // shutdown, so if the reconnection is enabled start a reconnect procedure.\n    //\n    if (~primus.options.strategy.indexOf('disconnect')) {\n      return primus.recovery.reconnect();\n    }\n\n    primus.emit('outgoing::end');\n    primus.emit('end');\n  });\n\n  //\n  // Setup the real-time client.\n  //\n  primus.client();\n\n  //\n  // Process the potential plugins.\n  //\n  for (var plugin in primus.ark) {\n    primus.ark[plugin].call(primus, primus, options);\n  }\n\n  //\n  // NOTE: The following code is only required if we're supporting network\n  // events as it requires access to browser globals.\n  //\n  if (!primus.NETWORK_EVENTS) return primus;\n\n  /**\n   * Handler for offline notifications.\n   *\n   * @api private\n   */\n  primus.offlineHandler = function offline() {\n    if (!primus.online) return; // Already or still offline, bailout.\n\n    primus.online = false;\n    primus.emit('offline');\n    primus.end();\n\n    //\n    // It is certainly possible that we're in a reconnection loop and that the\n    // user goes offline. In this case we want to kill the existing attempt so\n    // when the user goes online, it will attempt to reconnect freshly again.\n    //\n    primus.recovery.reset();\n  };\n\n  /**\n   * Handler for online notifications.\n   *\n   * @api private\n   */\n  primus.onlineHandler = function online() {\n    if (primus.online) return; // Already or still online, bailout.\n\n    primus.online = true;\n    primus.emit('online');\n\n    if (~primus.options.strategy.indexOf('online')) {\n      primus.recovery.reconnect();\n    }\n  };\n\n  if (window.addEventListener) {\n    window.addEventListener('offline', primus.offlineHandler, false);\n    window.addEventListener('online', primus.onlineHandler, false);\n  } else if (document.body.attachEvent){\n    document.body.attachEvent('onoffline', primus.offlineHandler);\n    document.body.attachEvent('ononline', primus.onlineHandler);\n  }\n\n  return primus;\n};\n\n/**\n * Really dead simple protocol parser. We simply assume that every message that\n * is prefixed with `primus::` could be used as some sort of protocol definition\n * for Primus.\n *\n * @param {String} msg The data.\n * @returns {Boolean} Is a protocol message.\n * @api private\n */\nPrimus.prototype.protocol = function protocol(msg) {\n  if (\n       'string' !== typeof msg\n    || msg.indexOf('primus::') !== 0\n  ) return false;\n\n  var last = msg.indexOf(':', 8)\n    , value = msg.slice(last + 2);\n\n  switch (msg.slice(8,  last)) {\n    case 'ping':\n      this.emit('incoming::ping', +value);\n      break;\n\n    case 'server':\n      //\n      // The server is closing the connection, forcefully disconnect so we don't\n      // reconnect again.\n      //\n      if ('close' === value) {\n        this.disconnect = true;\n      }\n      break;\n\n    case 'id':\n      this.emit('incoming::id', value);\n      break;\n\n    //\n    // Unknown protocol, somebody is probably sending `primus::` prefixed\n    // messages.\n    //\n    default:\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Execute the set of message transformers from Primus on the incoming or\n * outgoing message.\n * This function and it's content should be in sync with Spark#transforms in\n * spark.js.\n *\n * @param {Primus} primus Reference to the Primus instance with message transformers.\n * @param {Spark|Primus} connection Connection that receives or sends data.\n * @param {String} type The type of message, 'incoming' or 'outgoing'.\n * @param {Mixed} data The data to send or that has been received.\n * @param {String} raw The raw encoded data.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.transforms = function transforms(primus, connection, type, data, raw) {\n  var packet = { data: data }\n    , fns = primus.transformers[type];\n\n  //\n  // Iterate in series over the message transformers so we can allow optional\n  // asynchronous execution of message transformers which could for example\n  // retrieve additional data from the server, do extra decoding or even\n  // message validation.\n  //\n  (function transform(index, done) {\n    var transformer = fns[index++];\n\n    if (!transformer) return done();\n\n    if (1 === transformer.length) {\n      if (false === transformer.call(connection, packet)) {\n        //\n        // When false is returned by an incoming transformer it means that's\n        // being handled by the transformer and we should not emit the `data`\n        // event.\n        //\n        return;\n      }\n\n      return transform(index, done);\n    }\n\n    transformer.call(connection, packet, function finished(err, arg) {\n      if (err) return connection.emit('error', err);\n      if (false === arg) return;\n\n      transform(index, done);\n    });\n  }(0, function done() {\n    //\n    // We always emit 2 arguments for the data event, the first argument is the\n    // parsed data and the second argument is the raw string that we received.\n    // This allows you, for example, to do some validation on the parsed data\n    // and then save the raw string in your database without the stringify\n    // overhead.\n    //\n    if ('incoming' === type) return connection.emit('data', packet.data, raw);\n\n    connection._write(packet.data);\n  }));\n\n  return this;\n};\n\n/**\n * Retrieve the current id from the server.\n *\n * @param {Function} fn Callback function.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.id = function id(fn) {\n  if (this.socket && this.socket.id) return fn(this.socket.id);\n\n  this._write('primus::id::');\n  return this.once('incoming::id', fn);\n};\n\n/**\n * Establish a connection with the server. When this function is called we\n * assume that we don't have any open connections. If you do call it when you\n * have a connection open, it could cause duplicate connections.\n *\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.open = function open() {\n  context(this, 'open');\n\n  //\n  // Only start a `connection timeout` procedure if we're not reconnecting as\n  // that shouldn't count as an initial connection. This should be started\n  // before the connection is opened to capture failing connections and kill the\n  // timeout.\n  //\n  if (!this.recovery.reconnecting() && this.options.timeout) this.timeout();\n\n  this.emit('outgoing::open');\n  return this;\n};\n\n/**\n * Send a new message.\n *\n * @param {Mixed} data The data that needs to be written.\n * @returns {Boolean} Always returns true as we don't support back pressure.\n * @api public\n */\nPrimus.prototype.write = function write(data) {\n  context(this, 'write');\n  this.transforms(this, this, 'outgoing', data);\n\n  return true;\n};\n\n/**\n * The actual message writer.\n *\n * @param {Mixed} data The message that needs to be written.\n * @returns {Boolean} Successful write to the underlaying transport.\n * @api private\n */\nPrimus.prototype._write = function write(data) {\n  var primus = this;\n\n  //\n  // The connection is closed, normally this would already be done in the\n  // `spark.write` method, but as `_write` is used internally, we should also\n  // add the same check here to prevent potential crashes by writing to a dead\n  // socket.\n  //\n  if (Primus.OPEN !== primus.readyState) {\n    //\n    // If the buffer is at capacity, remove the first item.\n    //\n    if (this.buffer.length === this.options.queueSize) {\n      this.buffer.splice(0, 1);\n    }\n\n    this.buffer.push(data);\n    return false;\n  }\n\n  primus.encoder(data, function encoded(err, packet) {\n    //\n    // Do a \"safe\" emit('error') when we fail to parse a message. We don't\n    // want to throw here as listening to errors should be optional.\n    //\n    if (err) return primus.listeners('error').length && primus.emit('error', err);\n\n    //\n    // Hack 1: \\u2028 and \\u2029 are allowed inside a JSON string, but JavaScript\n    // defines them as newline separators. Unescaped control characters are not\n    // allowed inside JSON strings, so this causes an error at parse time. We\n    // work around this issue by escaping these characters. This can cause\n    // errors with JSONP requests or if the string is just evaluated.\n    //\n    if ('string' === typeof packet) {\n      if (~packet.indexOf('\\u2028')) packet = packet.replace(u2028, '\\\\u2028');\n      if (~packet.indexOf('\\u2029')) packet = packet.replace(u2029, '\\\\u2029');\n    }\n\n    primus.emit('outgoing::data', packet);\n  });\n\n  return true;\n};\n\n/**\n * Set a timer that, upon expiration, closes the client.\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.heartbeat = function heartbeat() {\n  if (!this.options.pingTimeout) return this;\n\n  this.timers.clear('heartbeat');\n  this.timers.setTimeout('heartbeat', function expired() {\n    //\n    // The network events already captured the offline event.\n    //\n    if (!this.online) return;\n\n    this.online = false;\n    this.emit('offline');\n    this.emit('incoming::end');\n  }, this.options.pingTimeout);\n\n  return this;\n};\n\n/**\n * Start a connection timeout.\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.timeout = function timeout() {\n  var primus = this;\n\n  /**\n   * Remove all references to the timeout listener as we've received an event\n   * that can be used to determine state.\n   *\n   * @api private\n   */\n  function remove() {\n    primus.removeListener('error', remove)\n          .removeListener('open', remove)\n          .removeListener('end', remove)\n          .timers.clear('connect');\n  }\n\n  primus.timers.setTimeout('connect', function expired() {\n    remove(); // Clean up old references.\n\n    if (primus.readyState === Primus.OPEN || primus.recovery.reconnecting()) {\n      return;\n    }\n\n    primus.emit('timeout');\n\n    //\n    // We failed to connect to the server.\n    //\n    if (~primus.options.strategy.indexOf('timeout')) {\n      primus.recovery.reconnect();\n    } else {\n      primus.end();\n    }\n  }, primus.options.timeout);\n\n  return primus.on('error', remove)\n    .on('open', remove)\n    .on('end', remove);\n};\n\n/**\n * Close the connection completely.\n *\n * @param {Mixed} data last packet of data.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.end = function end(data) {\n  context(this, 'end');\n\n  if (\n      this.readyState === Primus.CLOSED\n    && !this.timers.active('connect')\n    && !this.timers.active('open')\n  ) {\n    //\n    // If we are reconnecting stop the reconnection procedure.\n    //\n    if (this.recovery.reconnecting()) {\n      this.recovery.reset();\n      this.emit('end');\n    }\n\n    return this;\n  }\n\n  if (data !== undefined) this.write(data);\n\n  this.writable = false;\n  this.readable = false;\n\n  var readyState = this.readyState;\n  this.readyState = Primus.CLOSED;\n\n  if (readyState !== this.readyState) {\n    this.emit('readyStateChange', 'end');\n  }\n\n  this.timers.clear();\n  this.emit('outgoing::end');\n  this.emit('close');\n  this.emit('end');\n\n  return this;\n};\n\n/**\n * Completely demolish the Primus instance and forcefully nuke all references.\n *\n * @returns {Boolean}\n * @api public\n */\nPrimus.prototype.destroy = destroy('url timers options recovery socket transport transformers', {\n  before: 'end',\n  after: ['removeAllListeners', function detach() {\n    if (!this.NETWORK_EVENTS) return;\n\n    if (window.addEventListener) {\n      window.removeEventListener('offline', this.offlineHandler);\n      window.removeEventListener('online', this.onlineHandler);\n    } else if (document.body.attachEvent){\n      document.body.detachEvent('onoffline', this.offlineHandler);\n      document.body.detachEvent('ononline', this.onlineHandler);\n    }\n  }]\n});\n\n/**\n * Create a shallow clone of a given object.\n *\n * @param {Object} obj The object that needs to be cloned.\n * @returns {Object} Copy.\n * @api private\n */\nPrimus.prototype.clone = function clone(obj) {\n  return this.merge({}, obj);\n};\n\n/**\n * Merge different objects in to one target object.\n *\n * @param {Object} target The object where everything should be merged in.\n * @returns {Object} Original target with all merged objects.\n * @api private\n */\nPrimus.prototype.merge = function merge(target) {\n  for (var i = 1, key, obj; i < arguments.length; i++) {\n    obj = arguments[i];\n\n    for (key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key))\n        target[key] = obj[key];\n    }\n  }\n\n  return target;\n};\n\n/**\n * Parse the connection string.\n *\n * @type {Function}\n * @param {String} url Connection URL.\n * @returns {Object} Parsed connection.\n * @api private\n */\nPrimus.prototype.parse = require('url-parse');\n\n/**\n * Parse a query string.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object} Parsed query string.\n * @api private\n */\nPrimus.prototype.querystring = qs.parse;\n/**\n * Transform a query string object back into string equiv.\n *\n * @param {Object} obj The query string object.\n * @returns {String}\n * @api private\n */\nPrimus.prototype.querystringify = qs.stringify;\n\n/**\n * Generates a connection URI.\n *\n * @param {String} protocol The protocol that should used to crate the URI.\n * @returns {String|options} The URL.\n * @api private\n */\nPrimus.prototype.uri = function uri(options) {\n  var url = this.url\n    , server = []\n    , qsa = false;\n\n  //\n  // Query strings are only allowed when we've received clearance for it.\n  //\n  if (options.query) qsa = true;\n\n  options = options || {};\n  options.protocol = 'protocol' in options\n    ? options.protocol\n    : 'http:';\n  options.query = url.query && qsa\n    ? url.query.slice(1)\n    : false;\n  options.secure = 'secure' in options\n    ? options.secure\n    : url.protocol === 'https:' || url.protocol === 'wss:';\n  options.auth = 'auth' in options\n    ? options.auth\n    : url.auth;\n  options.pathname = 'pathname' in options\n    ? options.pathname\n    : this.pathname;\n  options.port = 'port' in options\n    ? +options.port\n    : +url.port || (options.secure ? 443 : 80);\n\n  //\n  // Allow transformation of the options before we construct a full URL from it.\n  //\n  this.emit('outgoing::url', options);\n\n  //\n  // We need to make sure that we create a unique connection URL every time to\n  // prevent back forward cache from becoming an issue. We're doing this by\n  // forcing an cache busting query string in to the URL.\n  //\n  var querystring = this.querystring(options.query || '');\n  querystring._primuscb = yeast();\n  options.query = this.querystringify(querystring);\n\n  //\n  // Automatically suffix the protocol so we can supply `ws:` and `http:` and\n  // it gets transformed correctly.\n  //\n  server.push(options.secure ? options.protocol.replace(':', 's:') : options.protocol, '');\n\n  server.push(options.auth ? options.auth +'@'+ url.host : url.host);\n\n  //\n  // Pathnames are optional as some Transformers would just use the pathname\n  // directly.\n  //\n  if (options.pathname) server.push(options.pathname.slice(1));\n\n  //\n  // Optionally add a search query.\n  //\n  if (qsa) server[server.length - 1] += '?'+ options.query;\n  else delete options.query;\n\n  if (options.object) return options;\n  return server.join('/');\n};\n\n/**\n * Register a new message transformer. This allows you to easily manipulate incoming\n * and outgoing data which is particularity handy for plugins that want to send\n * meta data together with the messages.\n *\n * @param {String} type Incoming or outgoing\n * @param {Function} fn A new message transformer.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.transform = function transform(type, fn) {\n  context(this, 'transform');\n\n  if (!(type in this.transformers)) {\n    return this.critical(new Error('Invalid transformer type'));\n  }\n\n  this.transformers[type].push(fn);\n  return this;\n};\n\n/**\n * A critical error has occurred, if we have an `error` listener, emit it there.\n * If not, throw it, so we get a stack trace + proper error message.\n *\n * @param {Error} err The critical error.\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.critical = function critical(err) {\n  if (this.emit('error', err)) return this;\n\n  throw err;\n};\n\n/**\n * Syntax sugar, adopt a Socket.IO like API.\n *\n * @param {String} url The URL we want to connect to.\n * @param {Object} options Connection options.\n * @returns {Primus}\n * @api public\n */\nPrimus.connect = function connect(url, options) {\n  return new Primus(url, options);\n};\n\n//\n// Expose the EventEmitter so it can be re-used by wrapping libraries we're also\n// exposing the Stream interface.\n//\nPrimus.EventEmitter = EventEmitter;\n\n//\n// These libraries are automatically inserted at the server-side using the\n// Primus#library method.\n//\nPrimus.prototype.client = null; // @import {primus::client};\nPrimus.prototype.authorization = null; // @import {primus::auth};\nPrimus.prototype.pathname = null; // @import {primus::pathname};\nPrimus.prototype.encoder = null; // @import {primus::encoder};\nPrimus.prototype.decoder = null; // @import {primus::decoder};\nPrimus.prototype.version = null; // @import {primus::version};\n\nif (\n     'undefined' !== typeof document\n  && 'undefined' !== typeof navigator\n) {\n  //\n  // Hack 2: If you press ESC in FireFox it will close all active connections.\n  // Normally this makes sense, when your page is still loading. But versions\n  // before FireFox 22 will close all connections including WebSocket connections\n  // after page load. One way to prevent this is to do a `preventDefault()` and\n  // cancel the operation before it bubbles up to the browsers default handler.\n  // It needs to be added as `keydown` event, if it's added keyup it will not be\n  // able to prevent the connection from being closed.\n  //\n  if (document.addEventListener) {\n    document.addEventListener('keydown', function keydown(e) {\n      if (e.keyCode !== 27 || !e.preventDefault) return;\n\n      e.preventDefault();\n    }, false);\n  }\n\n  //\n  // Hack 3: This is a Mac/Apple bug only, when you're behind a reverse proxy or\n  // have you network settings set to `automatic proxy discovery` the safari\n  // browser will crash when the WebSocket constructor is initialised. There is\n  // no way to detect the usage of these proxies available in JavaScript so we\n  // need to do some nasty browser sniffing. This only affects Safari versions\n  // lower then 5.1.4\n  //\n  var ua = (navigator.userAgent || '').toLowerCase()\n    , parsed = ua.match(/.+(?:rv|it|ra|ie)[\\/: ](\\d+)\\.(\\d+)(?:\\.(\\d+))?/) || []\n    , version = +[parsed[1], parsed[2]].join('.');\n\n  if (\n       !~ua.indexOf('chrome')\n    && ~ua.indexOf('safari')\n    && version < 534.54\n  ) {\n    Primus.prototype.AVOID_WEBSOCKETS = true;\n  }\n}\n\n//\n// Expose the library.\n//\nmodule.exports = Primus;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/access-control.js":"'use strict';\n\nvar access = require('access-control');\n\n/**\n * Add Access-Control to each request.\n *\n * @returns {Function}\n * @api public\n */\nmodule.exports = function configure() {\n  var control = access(this.options);\n\n  //\n  // We don't add Access-Control headers for HTTP upgrades.\n  //\n  control.upgrade = false;\n\n  return control;\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/authorization.js":"'use strict';\n\n/**\n * Authorization middleware for Primus which would accept or deny requests.\n *\n * @returns {Function}\n * @api public\n */\nmodule.exports = function configuration() {\n  /**\n   * The actual HTTP middleware.\n   *\n   * @param {Request} req HTTP request.\n   * @param {Response} res HTTP response.\n   * @param {Function} next Continuation.\n   * @api private\n   */\n  return function client(req, res, next) {\n    if ('function' !== typeof this.auth) return next();\n\n    this.auth(req, function authorized(err) {\n      if (!err) return next();\n\n      var message = JSON.stringify({ error: err.message || err })\n        , length = Buffer.byteLength(message)\n        , code = err.statusCode || 401;\n\n      //\n      // We need to handle two cases here, authentication for regular HTTP\n      // requests as well as authentication of WebSocket (upgrade) requests.\n      //\n      if (res.setHeader) {\n        res.statusCode = code;\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Length', length);\n\n        if (code === 401 && err.authenticate) {\n          res.setHeader('WWW-Authenticate', err.authenticate);\n        }\n\n        res.end(message);\n      } else {\n        res.write('HTTP/'+ req.httpVersion +' ');\n        res.write(code +' '+ require('http').STATUS_CODES[code] +'\\r\\n');\n        res.write('Connection: close\\r\\n');\n        res.write('Content-Type: application/json\\r\\n');\n        res.write('Content-Length: '+ length +'\\r\\n');\n\n        if (code === 401 && err.authenticate) {\n          res.write('WWW-Authenticate: ' + err.authenticate + '\\r\\n');\n        }\n\n        res.write('\\r\\n');\n        res.write(message);\n        res.destroy();\n      }\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/forwarded.js":"'use strict';\n\nvar forwarded = require('forwarded-for');\n\n/**\n * Add the `forwarded` property.\n *\n * @param {Request} req HTTP request.\n * @param {Response} res HTTP response.\n * @api private\n */\nmodule.exports = function configure() {\n  var primus = this;\n\n  return function ipaddress(req, res) {\n    req.forwarded = forwarded(req, req.headers || {}, primus.whitelist);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/no-cache.js":"'use strict';\n\nvar setHeader = require('setheader');\n\n/**\n * Forcefully add no-cache headers to HTTP responses.\n *\n * @param {Request} req The incoming HTTP request.\n * @param {Response} res The outgoing HTTP response.\n * @api public\n */\nfunction nocache(req, res) {\n  setHeader(res, 'Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');\n  setHeader(res, 'Pragma', 'no-cache');\n}\n\n//\n// We don't need no-cache headers for HTTP upgrades.\n//\nnocache.upgrade = false;\n\n//\n// Expose the module.\n//\nmodule.exports = nocache;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/primus.js":"'use strict';\n\n/**\n * Serve the client library that is shipped and compiled within Primus.\n *\n * @returns {Function}\n * @api public\n */\nmodule.exports = function configure() {\n  var primusjs = this.pathname +'/primus.js'\n    , primus = this\n    , library\n    , length;\n\n  /**\n   * The actual HTTP middleware.\n   *\n   * @param {Request} req HTTP request.\n   * @param {Response} res HTTP response.\n   * @api private\n   */\n  function client(req, res) {\n    if (req.uri.pathname !== primusjs) return;\n\n    //\n    // Lazy include and compile the library so we give our server some time to\n    // add plugins or we will compile the client library without plugins, which\n    // is sad :(\n    //\n    library = library || new Buffer(primus.library());\n    length = length || library.length;\n\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/javascript; charset=utf-8');\n    res.setHeader('Content-Length', length);\n    res.end(library);\n\n    return true;\n  }\n\n  //\n  // We don't serve our client-side library over HTTP upgrades.\n  //\n  client.upgrade = false;\n\n  return client;\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/middleware/xss.js":"'use strict';\n\nvar setHeader = require('setheader');\n\n/**\n * Forcefully add x-xss-protection headers.\n *\n * @param {Request} req The incoming HTTP request.\n * @param {Response} res The outgoing HTTP response.\n * @api public\n */\nfunction xss(req, res) {\n  var agent = (req.headers['user-agent'] || '').toLowerCase();\n\n  if (agent && (~agent.indexOf(';msie') || ~agent.indexOf('trident/'))) {\n    setHeader(res, 'X-XSS-Protection', '0');\n  }\n}\n\n//\n// We don't need protection headers for HTTP upgrades.\n//\nxss.upgrade = false;\n\n//\n// Expose the module.\n//\nmodule.exports = xss;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/parsers/binary.js":"'use strict';\n\nconst BinaryPack = require('binary-pack');\n\n/**\n * Message encoder.\n *\n * @param {Mixed} data The data that needs to be transformed.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.encoder = function encoder(data, fn) {\n  var err;\n\n  try { data = BinaryPack.pack(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n/**\n * Message decoder.\n *\n * @param {Mixed} data The data that needs to be transformed.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.decoder = function decoder(data, fn) {\n  var err;\n\n  try { data = BinaryPack.unpack(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n//\n// Expose the library so it can be added in our Primus module.\n//\nexports.library = `var BinaryPack = (function () {\n  var exports, bp;\n\n  try { bp = Primus.requires('binary-pack'); }\n  catch (e) {}\n\n  if (bp) return bp;\n\n  exports = {};\n  (function () {\n    ${BinaryPack.BrowserSource}\n  }).call(exports);\n  return exports.BinaryPack;\n})();\n`;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/parsers/ejson.js":"'use strict';\n\nvar EJSON = require('ejson');\n\n/**\n * Message encoder.\n *\n * @param {Mixed} data The data that needs to be transformed into a string.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.encoder = function encoder(data, fn) {\n  var err;\n\n  try { data = EJSON.stringify(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n/**\n * Message decoder.\n *\n * @param {Mixed} data The data that needs to be parsed from a string.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.decoder = function decoder(data, fn) {\n  var err;\n\n  try { data = EJSON.parse(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n//\n// Expose the library which is compiled for global consumption instead of\n// browserify.\n//\nexports.library = require('ejson/source');\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/parsers/json.js":"'use strict';\n\n/**\n * Message encoder.\n *\n * @param {Mixed} data The data that needs to be transformed into a string.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.encoder = function encoder(data, fn) {\n  var err;\n\n  try { data = JSON.stringify(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n/**\n * Message decoder.\n *\n * @param {Mixed} data The data that needs to be parsed from a string.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.decoder = function decoder(data, fn) {\n  var err;\n\n  if ('string' !== typeof data) return fn(err, data);\n\n  try { data = JSON.parse(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/parsers/msgpack.js":"'use strict';\n\nconst msgpack = require('primus-msgpack');\n\n/**\n * Message encoder.\n *\n * @param {Mixed} data The data that needs to be transformed.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.encoder = function encoder(data, fn) {\n  var err;\n\n  try { data = msgpack.encode(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\n\n/**\n * Message decoder.\n *\n * @param {Mixed} data The data that needs to be transformed.\n * @param {Function} fn Completion callback.\n * @api public\n */\nexports.decoder = function decoder(data, fn) {\n  var err;\n\n  try {\n    data = msgpack.decode(data instanceof ArrayBuffer ? new Uint8Array(data) : data);\n  } catch (e) {\n    err = e;\n  }\n\n  fn(err, data);\n};\n\n//\n// Expose the library so it can be added in our Primus module.\n//\nexports.library = `var msgpack = (function () {\n  var exports, mp;\n\n  try { mp = Primus.requires('primus-msgpack'); }\n  catch (e) {}\n\n  if (mp) return mp;\n\n  exports = {};\n  ${msgpack.BrowserSource}\n  return exports.msgpack;\n})();\n`;\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/browserchannel/client.js":"'use strict';\n/*globals BCSocket*/\n\n/**\n * Minimum viable BrowserChannel client. This function is stringified and added\n * in our client-side library.\n *\n * @runat client\n * @api private\n */\nmodule.exports = function client() {\n  var primus = this\n    , socket;\n\n  //\n  // Select an available BrowserChannel factory.\n  //\n  var Factory = (function factory() {\n    if ('undefined' !== typeof BCSocket) return BCSocket;\n\n    try { return Primus.requires('browserchannel').BCSocket; }\n    catch (e) {}\n\n    return undefined;\n  })();\n\n  if (!Factory) return primus.critical(new Error(\n    'Missing required `browserchannel` module. ' +\n    'Please run `npm install --save browserchannel`'\n  ));\n\n  //\n  // Connect to the given URL.\n  //\n  primus.on('outgoing::open', function connect() {\n    primus.emit('outgoing::end');\n\n    var url = primus.uri({ protocol: 'http:' });\n\n    primus.socket = socket = new Factory(url, primus.merge(primus.transport, {\n      extraParams: primus.querystring(primus.url.query),\n      reconnect: false\n    }));\n\n    //\n    // Setup the Event handlers.\n    //\n    socket.onopen = primus.emits('incoming::open');\n    socket.onerror = primus.emits('incoming::error');\n    socket.onclose = primus.emits('incoming::end');\n    socket.onmessage = primus.emits('incoming::data', function parse(next, evt) {\n      next(undefined, evt.data);\n    });\n  });\n\n  //\n  // We need to write a new message to the socket.\n  //\n  primus.on('outgoing::data', function write(message) {\n    if (socket) socket.send(message);\n  });\n\n  //\n  // Attempt to reconnect the socket.\n  //\n  primus.on('outgoing::reconnect', function reconnect() {\n    primus.emit('outgoing::open');\n  });\n\n  //\n  // We need to close the socket.\n  //\n  primus.on('outgoing::end', function close() {\n    if (!socket) return;\n\n    socket.onerror = socket.onopen = socket.onclose = socket.onmessage = function () {};\n\n    //\n    // Bug: BrowserChannel cannot close the connection if it's already\n    // connecting. Bypass this behaviour by checking the readyState and\n    // defer the close call.\n    //\n    if (socket.readyState === socket.CONNECTING) {\n      socket.onopen = function onopen() {\n        this.close();\n      };\n    } else {\n      socket.close();\n    }\n    socket = null;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/browserchannel/server.js":"'use strict';\n\nvar browserchannel = require('browserchannel')\n  , http = require('http');\n\n/**\n * Minimum viable Browserchannel server for Node.js that works through the primus\n * interface.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  var primus = this.primus\n    , Spark = this.Spark;\n\n  //\n  // We've received a new connection, create a new Spark. The Spark will\n  // automatically announce it self as a new connection once it's created (after\n  // the next tick).\n  //\n  this.service = browserchannel.server(Object.assign(primus.options.transport, {\n    base: primus.pathname\n  }), function connection(socket) {\n    var spark = new Spark(\n        socket.headers                          // HTTP request headers.\n      , {                                       // IP address Location.\n          remoteAddress: socket.address,\n          remotePort: 1337\n        }\n      , socket.query                            // Optional query string.\n      , socket.id                               // Unique connection id.\n    );\n\n    spark.on('outgoing::end', function end() {\n      if (socket) socket.stop();\n    }).on('outgoing::data', function write(data) {\n      socket.send(data);\n    });\n\n    socket.on('message', spark.emits('incoming::data'));\n    socket.on('error', spark.emits('incoming::error'));\n    socket.on('close', spark.emits('incoming::end', function parser(next) {\n      socket.removeAllListeners();\n      socket = null;\n      next();\n    }));\n  });\n\n  //\n  // Listen to upgrade requests.\n  //\n  this.on('request', function request(req, res) {\n    //\n    // The browser.channel returns a middleware layer.\n    //\n    this.service(req, res, function next() {\n      res.writeHead(404, {'content-type': 'text/plain'});\n      res.end(http.STATUS_CODES[404]);\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/engine.io/library.js":"(function(f){var g;if(typeof window!=='undefined'){g=window}else if(typeof self!=='undefined'){g=self}g.eio=f()})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./socket');\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = _dereq_('engine.io-parser');\n\n},{\"./socket\":2,\"engine.io-parser\":16}],2:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar transports = _dereq_('./transports/index');\nvar Emitter = _dereq_('component-emitter');\n\nvar index = _dereq_('indexof');\nvar parser = _dereq_('engine.io-parser');\nvar parseuri = _dereq_('parseuri');\nvar parsejson = _dereq_('parsejson');\nvar parseqs = _dereq_('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (global.location && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global === 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = _dereq_('./transport');\nSocket.transports = _dereq_('./transports/index');\nSocket.parser = _dereq_('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // per-transport options\n  var options = this.transportOptions[name] || {};\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void (0)\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  var self = this;\n\n  if (this.transport) {\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./transport\":3,\"./transports/index\":4,\"component-emitter\":14,\"engine.io-parser\":16,\"indexof\":21,\"parsejson\":23,\"parseqs\":24,\"parseuri\":25}],3:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar parser = _dereq_('engine.io-parser');\nvar Emitter = _dereq_('component-emitter');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n\n},{\"component-emitter\":14,\"engine.io-parser\":16}],4:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\nvar XHR = _dereq_('./polling-xhr');\nvar JSONP = _dereq_('./polling-jsonp');\nvar websocket = _dereq_('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling-jsonp\":5,\"./polling-xhr\":6,\"./websocket\":8,\"xmlhttprequest-ssl\":9}],5:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module requirements.\n */\n\nvar Polling = _dereq_('./polling');\nvar inherit = _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio = [];\n    callbacks = global.___eio;\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document && global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":7,\"component-inherit\":15}],6:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\nvar Polling = _dereq_('./polling');\nvar Emitter = _dereq_('component-emitter');\nvar inherit = _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        try {\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n        } catch (e) {\n          var ui8Arr = new Uint8Array(this.xhr.response);\n          var dataArray = [];\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n            dataArray.push(ui8Arr[idx]);\n          }\n\n          data = String.fromCharCode.apply(null, dataArray);\n        }\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":7,\"component-emitter\":14,\"component-inherit\":15,\"xmlhttprequest-ssl\":9}],7:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parseqs = _dereq_('parseqs');\nvar parser = _dereq_('engine.io-parser');\nvar inherit = _dereq_('component-inherit');\nvar yeast = _dereq_('yeast');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      total++;\n      this.once('pollComplete', function () {\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      total++;\n      this.once('drain', function () {\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n},{\"../transport\":3,\"component-inherit\":15,\"engine.io-parser\":16,\"parseqs\":24,\"xmlhttprequest-ssl\":9,\"yeast\":26}],8:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parser = _dereq_('engine.io-parser');\nvar parseqs = _dereq_('parseqs');\nvar inherit = _dereq_('component-inherit');\nvar yeast = _dereq_('yeast');\n\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\nvar NodeWebSocket;\nif (typeof window === 'undefined') {\n  try {\n    NodeWebSocket = _dereq_('ws');\n  } catch (e) { }\n}\n\n/**\n * Get either the `WebSocket` or `MozWebSocket` globals\n * in the browser or try to resolve WebSocket-compatible\n * interface exposed by `ws` for Node-like environment.\n */\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  WebSocket = NodeWebSocket;\n}\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\n  this.protocols = opts.protocols;\n  if (!this.usingBrowserWebSocket) {\n    WebSocket = NodeWebSocket;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function () {\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var uri = this.uri();\n  var protocols = this.protocols;\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n  if (this.localAddress) {\n    opts.localAddress = this.localAddress;\n  }\n\n  try {\n    this.ws = this.usingBrowserWebSocket ? (protocols ? new WebSocket(uri, protocols) : new WebSocket(uri)) : new WebSocket(uri, protocols, opts);\n  } catch (err) {\n    return this.emit('error', err);\n  }\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'nodebuffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function () {\n  var self = this;\n\n  this.ws.onopen = function () {\n    self.onOpen();\n  };\n  this.ws.onclose = function () {\n    self.onClose();\n  };\n  this.ws.onmessage = function (ev) {\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function (e) {\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function (packet) {\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\n        if (!self.usingBrowserWebSocket) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (self.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e) {\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done () {\n    self.emit('flush');\n\n    // fake drain\n    // defer to next tick to allow Socket to clear writeBuffer\n    setTimeout(function () {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function () {\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function () {\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\n    ('ws' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function () {\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../transport\":3,\"component-inherit\":15,\"engine.io-parser\":16,\"parseqs\":24,\"ws\":undefined,\"yeast\":26}],9:[function(_dereq_,module,exports){\n(function (global){\n// browser shim for xmlhttprequest module\n\nvar hasCORS = _dereq_('has-cors');\n\nmodule.exports = function (opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\n    } catch (e) { }\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"has-cors\":20}],10:[function(_dereq_,module,exports){\nmodule.exports = after\n\nfunction after(count, callback, err_cb) {\n    var bail = false\n    err_cb = err_cb || noop\n    proxy.count = count\n\n    return (count === 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count <= 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail = true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback = err_cb\n        } else if (proxy.count === 0 && !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n\n},{}],11:[function(_dereq_,module,exports){\n/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n\n},{}],12:[function(_dereq_,module,exports){\n/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n\n},{}],13:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var a = new Blob(['hi']);\n    return a.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView = blobSupported && (function() {\n  try {\n    var b = new Blob([new Uint8Array([1,2])]);\n    return b.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i = 0; i < ary.length; i++) {\n    var chunk = ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf = chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !== buf.byteLength) {\n        var copy = new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf = copy.buffer;\n      }\n\n      ary[i] = buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],14:[function(_dereq_,module,exports){\n\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n},{}],15:[function(_dereq_,module,exports){\n\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};\n},{}],16:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar keys = _dereq_('./keys');\nvar hasBinary = _dereq_('has-binary');\nvar sliceBuffer = _dereq_('arraybuffer.slice');\nvar after = _dereq_('after');\nvar utf8 = _dereq_('./utf8');\n\nvar base64encoder;\nif (global && global.ArrayBuffer) {\n  base64encoder = _dereq_('base64-arraybuffer');\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = _dereq_('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, { strict: false });\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = '', n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || (length != (n = Number(length)))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    }\n\n    // advance cursor\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] === 255) break;\n\n      // 310 = char length of Number.MAX_VALUE\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./keys\":17,\"./utf8\":18,\"after\":10,\"arraybuffer.slice\":11,\"base64-arraybuffer\":12,\"blob\":13,\"has-binary\":19}],17:[function(_dereq_,module,exports){\n\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n},{}],18:[function(_dereq_,module,exports){\n(function (global){\n/*! https://mths.be/utf8js v2.1.2 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint, strict) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tif (strict) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t\t' is not a scalar value'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint, strict) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tif (!checkScalarValue(codePoint, strict)) {\n\t\t\t\tcodePoint = 0xFFFD;\n\t\t\t}\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint, strict);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol(strict) {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol(strict)) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.1.2',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\tif (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],19:[function(_dereq_,module,exports){\n(function (global){\n\n/*\n * Module requirements.\n */\n\nvar isArray = _dereq_('isarray');\n\n/**\n * Module exports.\n */\n\nmodule.exports = hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Right now only Buffer and ArrayBuffer are supported..\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary(data) {\n\n  function _hasBinary(obj) {\n    if (!obj) return false;\n\n    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||\n         (global.Blob && obj instanceof Blob) ||\n         (global.File && obj instanceof File)\n        ) {\n      return true;\n    }\n\n    if (isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n          if (_hasBinary(obj[i])) {\n              return true;\n          }\n      }\n    } else if (obj && 'object' == typeof obj) {\n      // see: https://github.com/Automattic/has-binary/pull/4\n      if (obj.toJSON && 'function' == typeof obj.toJSON) {\n        obj = obj.toJSON();\n      }\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return _hasBinary(data);\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"isarray\":22}],20:[function(_dereq_,module,exports){\n\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n\n},{}],21:[function(_dereq_,module,exports){\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n},{}],22:[function(_dereq_,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],23:[function(_dereq_,module,exports){\n(function (global){\n/**\r\n * JSON parse.\r\n *\r\n * @see Based on jQuery#parseJSON (MIT) and JSON2\r\n * @api private\r\n */\r\n\r\nvar rvalidchars = /^[\\],:{}\\s]*$/;\r\nvar rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\r\nvar rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\r\nvar rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\r\nvar rtrimLeft = /^\\s+/;\r\nvar rtrimRight = /\\s+$/;\r\n\r\nmodule.exports = function parsejson(data) {\r\n  if ('string' != typeof data || !data) {\r\n    return null;\r\n  }\r\n\r\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\r\n\r\n  // Attempt to parse using the native JSON parser first\r\n  if (global.JSON && JSON.parse) {\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\r\n      .replace(rvalidtokens, ']')\r\n      .replace(rvalidbraces, ''))) {\r\n    return (new Function('return ' + data))();\r\n  }\r\n};\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],24:[function(_dereq_,module,exports){\n/**\r\n * Compiles a querystring\r\n * Returns string representation of the object\r\n *\r\n * @param {Object}\r\n * @api private\r\n */\r\n\r\nexports.encode = function (obj) {\r\n  var str = '';\r\n\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      if (str.length) str += '&';\r\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\r\n    }\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Parses a simple querystring into an object\r\n *\r\n * @param {String} qs\r\n * @api private\r\n */\r\n\r\nexports.decode = function(qs){\r\n  var qry = {};\r\n  var pairs = qs.split('&');\r\n  for (var i = 0, l = pairs.length; i < l; i++) {\r\n    var pair = pairs[i].split('=');\r\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n  }\r\n  return qry;\r\n};\r\n\n},{}],25:[function(_dereq_,module,exports){\n/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    return uri;\r\n};\r\n\n},{}],26:[function(_dereq_,module,exports){\n'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n\n},{}],27:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./lib/index');\n\n},{\"./lib/index\":1}]},{},[27])(27)\n});","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/engine.io/server.js":"'use strict';\n\nconst engine = require('engine.io');\n\n/**\n * Minimum viable Engine.IO server for Node.js that works through the primus\n * interface.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  this.service = new engine.Server(Object.assign({\n    perMessageDeflate: !!this.primus.options.compression,\n    httpCompression: !!this.primus.options.compression,\n    maxHttpBufferSize: this.primus.options.maxLength\n  }, this.primus.options.transport));\n\n  //\n  // We've received a new connection, create a new Spark. The Spark will\n  // automatically announce it self as a new connection once it's created (after\n  // the next tick).\n  //\n  this.service.on('connection', (socket) => {\n    const spark = new this.Spark(\n        socket.request.headers  // HTTP request headers.\n      , socket.request.primus   // IP Address location.\n      , socket.request.query    // Optional query string.\n      , socket.id               // Unique connection id.\n      , socket.request          // Reference to the HTTP req.\n    );\n\n    spark.on('outgoing::end', () => socket && socket.close());\n    spark.on('outgoing::data', (data) => socket.write(data));\n\n    socket.on('error', spark.emits('incoming::error'));\n    socket.on('data', spark.emits('incoming::data'));\n    socket.on('close', spark.emits('incoming::end', (next) => {\n      socket.removeAllListeners();\n      socket = null;\n      next();\n    }));\n  });\n\n  //\n  // Listen to upgrade requests.\n  //\n  this.on('upgrade', (req, socket, head) => {\n    this.service.handleUpgrade(req, socket, head);\n  }).on('request', (req, res) => {\n    //\n    // Engine.IO closes the handshake socket before we receive a `connection`\n    // event. And as the socket is already answered it can be undefined.\n    //\n    req.primus = {\n      remoteAddress: req.socket.remoteAddress,\n      remotePort: req.socket.remotePort\n    };\n\n    this.service.handleRequest(req, res);\n  }).once('close',  () => this.service.close());\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/faye/server.js":"'use strict';\n\nconst Faye = require('faye-websocket');\nconst http = require('http');\nconst url = require('url');\n\nconst PrimusError = require('../../errors').PrimusError;\n\n/**\n * Minimum viable WebSocket server that works through the Primus interface.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  let options = { maxLength: this.primus.options.maxLength };\n\n  if (this.primus.options.compression) {\n    try {\n      options.extensions = [ require('permessage-deflate') ];\n    } catch (e) {\n      [\n        '',\n        'Missing required npm dependency for faye',\n        'To use the permessage-deflate extension with the faye transformer, ',\n        'you have to install an additional dependency.',\n        'Please run the following command and try again:',\n        '',\n        '  npm install --save permessage-deflate',\n        ''\n      ].forEach((line) => console.error(`Primus: ${line}`));\n\n      throw new PrimusError(\n        'Missing dependencies for transformer: \"faye\"',\n        this.primus\n      );\n    }\n  }\n\n  options = Object.assign(options, this.primus.options.transport);\n\n  //\n  // Listen to upgrade requests.\n  //\n  this.on('upgrade', (req, socket, head) => {\n    if (!Faye.isWebSocket(req)) return socket.destroy();\n\n    let websocket = new Faye(req, socket, head, null, options);\n\n    //\n    // The WebSocket handshake is complete only when the `open` event is fired.\n    //\n    websocket.on('open', () => {\n      const spark = new this.Spark(\n          req.headers               // HTTP request headers.\n        , req                       // IP address location.\n        , url.parse(req.url).query  // Optional query string.\n        , null                      // We don't have an unique id.\n        , req                       // Reference to the HTTP req.\n      );\n\n      spark.on('outgoing::end', () => websocket && websocket.close());\n      spark.on('outgoing::data', (data) => {\n        if ('string' === typeof data) return websocket.send(data);\n\n        websocket.send(data, { binary: true });\n      });\n\n      websocket.on('error', spark.emits('incoming::error'));\n      websocket.on('message', spark.emits('incoming::data', (next, evt) => {\n        next(undefined, evt.data);\n      }));\n      websocket.on('close', spark.emits('incoming::end', (next) => {\n        websocket.removeAllListeners();\n        websocket = null;\n        next();\n      }));\n    });\n  });\n\n  //\n  // Listen to non-upgrade requests.\n  //\n  this.on('request', (req, res) => {\n    res.writeHead(426, { 'content-type': 'text/plain' });\n    res.end(http.STATUS_CODES[426]);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/sockjs/library.js":"(function(f){var g;if(typeof window!=='undefined'){g=window}else if(typeof self!=='undefined'){g=self}g.SockJS=f()})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , Event = _dereq_('./event')\n  ;\n\nfunction CloseEvent() {\n  Event.call(this);\n  this.initEvent('close', false, false);\n  this.wasClean = false;\n  this.code = 0;\n  this.reason = '';\n}\n\ninherits(CloseEvent, Event);\n\nmodule.exports = CloseEvent;\n\n},{\"./event\":3,\"inherits\":53}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventTarget = _dereq_('./eventtarget')\n  ;\n\nfunction EventEmitter() {\n  EventTarget.call(this);\n}\n\ninherits(EventEmitter, EventTarget);\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  if (type) {\n    delete this._listeners[type];\n  } else {\n    this._listeners = {};\n  }\n};\n\nEventEmitter.prototype.once = function(type, listener) {\n  var self = this\n    , fired = false;\n\n  function g() {\n    self.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  this.on(type, g);\n};\n\nEventEmitter.prototype.emit = function() {\n  var type = arguments[0];\n  var listeners = this._listeners[type];\n  if (!listeners) {\n    return;\n  }\n  // equivalent of Array.prototype.slice.call(arguments, 1);\n  var l = arguments.length;\n  var args = new Array(l - 1);\n  for (var ai = 1; ai < l; ai++) {\n    args[ai - 1] = arguments[ai];\n  }\n  for (var i = 0; i < listeners.length; i++) {\n    listeners[i].apply(this, args);\n  }\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;\nEventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;\n\nmodule.exports.EventEmitter = EventEmitter;\n\n},{\"./eventtarget\":4,\"inherits\":53}],3:[function(_dereq_,module,exports){\n'use strict';\n\nfunction Event(eventType) {\n  this.type = eventType;\n}\n\nEvent.prototype.initEvent = function(eventType, canBubble, cancelable) {\n  this.type = eventType;\n  this.bubbles = canBubble;\n  this.cancelable = cancelable;\n  this.timeStamp = +new Date();\n  return this;\n};\n\nEvent.prototype.stopPropagation = function() {};\nEvent.prototype.preventDefault = function() {};\n\nEvent.CAPTURING_PHASE = 1;\nEvent.AT_TARGET = 2;\nEvent.BUBBLING_PHASE = 3;\n\nmodule.exports = Event;\n\n},{}],4:[function(_dereq_,module,exports){\n'use strict';\n\n/* Simplified implementation of DOM2 EventTarget.\n *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget\n */\n\nfunction EventTarget() {\n  this._listeners = {};\n}\n\nEventTarget.prototype.addEventListener = function(eventType, listener) {\n  if (!(eventType in this._listeners)) {\n    this._listeners[eventType] = [];\n  }\n  var arr = this._listeners[eventType];\n  // #4\n  if (arr.indexOf(listener) === -1) {\n    // Make a copy so as not to interfere with a current dispatchEvent.\n    arr = arr.concat([listener]);\n  }\n  this._listeners[eventType] = arr;\n};\n\nEventTarget.prototype.removeEventListener = function(eventType, listener) {\n  var arr = this._listeners[eventType];\n  if (!arr) {\n    return;\n  }\n  var idx = arr.indexOf(listener);\n  if (idx !== -1) {\n    if (arr.length > 1) {\n      // Make a copy so as not to interfere with a current dispatchEvent.\n      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));\n    } else {\n      delete this._listeners[eventType];\n    }\n    return;\n  }\n};\n\nEventTarget.prototype.dispatchEvent = function() {\n  var event = arguments[0];\n  var t = event.type;\n  // equivalent of Array.prototype.slice.call(arguments, 0);\n  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);\n  // TODO: This doesn't match the real behavior; per spec, onfoo get\n  // their place in line from the /first/ time they're set from\n  // non-null. Although WebKit bumps it to the end every time it's\n  // set.\n  if (this['on' + t]) {\n    this['on' + t].apply(this, args);\n  }\n  if (t in this._listeners) {\n    // Grab a reference to the listeners list. removeEventListener may alter the list.\n    var listeners = this._listeners[t];\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i].apply(this, args);\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n\n},{}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , Event = _dereq_('./event')\n  ;\n\nfunction TransportMessageEvent(data) {\n  Event.call(this);\n  this.initEvent('message', false, false);\n  this.data = data;\n}\n\ninherits(TransportMessageEvent, Event);\n\nmodule.exports = TransportMessageEvent;\n\n},{\"./event\":3,\"inherits\":53}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar JSON3 = _dereq_('json3')\n  , iframeUtils = _dereq_('./utils/iframe')\n  ;\n\nfunction FacadeJS(transport) {\n  this._transport = transport;\n  transport.on('message', this._transportMessage.bind(this));\n  transport.on('close', this._transportClose.bind(this));\n}\n\nFacadeJS.prototype._transportClose = function(code, reason) {\n  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));\n};\nFacadeJS.prototype._transportMessage = function(frame) {\n  iframeUtils.postMessage('t', frame);\n};\nFacadeJS.prototype._send = function(data) {\n  this._transport.send(data);\n};\nFacadeJS.prototype._close = function() {\n  this._transport.close();\n  this._transport.removeAllListeners();\n};\n\nmodule.exports = FacadeJS;\n\n},{\"./utils/iframe\":46,\"json3\":54}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar urlUtils = _dereq_('./utils/url')\n  , eventUtils = _dereq_('./utils/event')\n  , JSON3 = _dereq_('json3')\n  , FacadeJS = _dereq_('./facade')\n  , InfoIframeReceiver = _dereq_('./info-iframe-receiver')\n  , iframeUtils = _dereq_('./utils/iframe')\n  , loc = _dereq_('./location')\n  ;\n\nmodule.exports = function(SockJS, availableTransports) {\n  var transportMap = {};\n  availableTransports.forEach(function(at) {\n    if (at.facadeTransport) {\n      transportMap[at.facadeTransport.transportName] = at.facadeTransport;\n    }\n  });\n\n  // hard-coded for the info iframe\n  // TODO see if we can make this more dynamic\n  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;\n  var parentOrigin;\n\n  /* eslint-disable camelcase */\n  SockJS.bootstrap_iframe = function() {\n    /* eslint-enable camelcase */\n    var facade;\n    iframeUtils.currentWindowId = loc.hash.slice(1);\n    var onMessage = function(e) {\n      if (e.source !== parent) {\n        return;\n      }\n      if (typeof parentOrigin === 'undefined') {\n        parentOrigin = e.origin;\n      }\n      if (e.origin !== parentOrigin) {\n        return;\n      }\n\n      var iframeMessage;\n      try {\n        iframeMessage = JSON3.parse(e.data);\n      } catch (ignored) {\n        return;\n      }\n\n      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {\n        return;\n      }\n      switch (iframeMessage.type) {\n      case 's':\n        var p;\n        try {\n          p = JSON3.parse(iframeMessage.data);\n        } catch (ignored) {\n          break;\n        }\n        var version = p[0];\n        var transport = p[1];\n        var transUrl = p[2];\n        var baseUrl = p[3];\n        // change this to semver logic\n        if (version !== SockJS.version) {\n          throw new Error('Incompatible SockJS! Main site uses:' +\n                    ' \"' + version + '\", the iframe:' +\n                    ' \"' + SockJS.version + '\".');\n        }\n\n        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||\n            !urlUtils.isOriginEqual(baseUrl, loc.href)) {\n          throw new Error('Can\\'t connect to different domain from within an ' +\n                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');\n        }\n        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));\n        break;\n      case 'm':\n        facade._send(iframeMessage.data);\n        break;\n      case 'c':\n        if (facade) {\n          facade._close();\n        }\n        facade = null;\n        break;\n      }\n    };\n\n    eventUtils.attachEvent('message', onMessage);\n\n    // Start\n    iframeUtils.postMessage('s');\n  };\n};\n\n},{\"./facade\":6,\"./info-iframe-receiver\":9,\"./location\":12,\"./utils/event\":45,\"./utils/iframe\":46,\"./utils/url\":51,\"json3\":54}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  , JSON3 = _dereq_('json3')\n  , objectUtils = _dereq_('./utils/object')\n  ;\n\nfunction InfoAjax(url, AjaxObject) {\n  EventEmitter.call(this);\n\n  var self = this;\n  var t0 = +new Date();\n  this.xo = new AjaxObject('GET', url);\n\n  this.xo.once('finish', function(status, text) {\n    var info, rtt;\n    if (status === 200) {\n      rtt = (+new Date()) - t0;\n      if (text) {\n        try {\n          info = JSON3.parse(text);\n        } catch (e) {\n        }\n      }\n\n      if (!objectUtils.isObject(info)) {\n        info = {};\n      }\n    }\n    self.emit('finish', info, rtt);\n    self.removeAllListeners();\n  });\n}\n\ninherits(InfoAjax, EventEmitter);\n\nInfoAjax.prototype.close = function() {\n  this.removeAllListeners();\n  this.xo.close();\n};\n\nmodule.exports = InfoAjax;\n\n},{\"./utils/object\":48,\"events\":2,\"inherits\":53,\"json3\":54}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  , JSON3 = _dereq_('json3')\n  , XHRLocalObject = _dereq_('./transport/sender/xhr-local')\n  , InfoAjax = _dereq_('./info-ajax')\n  ;\n\nfunction InfoReceiverIframe(transUrl) {\n  var self = this;\n  EventEmitter.call(this);\n\n  this.ir = new InfoAjax(transUrl, XHRLocalObject);\n  this.ir.once('finish', function(info, rtt) {\n    self.ir = null;\n    self.emit('message', JSON3.stringify([info, rtt]));\n  });\n}\n\ninherits(InfoReceiverIframe, EventEmitter);\n\nInfoReceiverIframe.transportName = 'iframe-info-receiver';\n\nInfoReceiverIframe.prototype.close = function() {\n  if (this.ir) {\n    this.ir.close();\n    this.ir = null;\n  }\n  this.removeAllListeners();\n};\n\nmodule.exports = InfoReceiverIframe;\n\n},{\"./info-ajax\":8,\"./transport/sender/xhr-local\":36,\"events\":2,\"inherits\":53,\"json3\":54}],10:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  , JSON3 = _dereq_('json3')\n  , utils = _dereq_('./utils/event')\n  , IframeTransport = _dereq_('./transport/iframe')\n  , InfoReceiverIframe = _dereq_('./info-iframe-receiver')\n  ;\n\nfunction InfoIframe(baseUrl, url) {\n  var self = this;\n  EventEmitter.call(this);\n\n  var go = function() {\n    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);\n\n    ifr.once('message', function(msg) {\n      if (msg) {\n        var d;\n        try {\n          d = JSON3.parse(msg);\n        } catch (e) {\n          self.emit('finish');\n          self.close();\n          return;\n        }\n\n        var info = d[0], rtt = d[1];\n        self.emit('finish', info, rtt);\n      }\n      self.close();\n    });\n\n    ifr.once('close', function() {\n      self.emit('finish');\n      self.close();\n    });\n  };\n\n  // TODO this seems the same as the 'needBody' from transports\n  if (!global.document.body) {\n    utils.attachEvent('load', go);\n  } else {\n    go();\n  }\n}\n\ninherits(InfoIframe, EventEmitter);\n\nInfoIframe.enabled = function() {\n  return IframeTransport.enabled();\n};\n\nInfoIframe.prototype.close = function() {\n  if (this.ifr) {\n    this.ifr.close();\n  }\n  this.removeAllListeners();\n  this.ifr = null;\n};\n\nmodule.exports = InfoIframe;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./info-iframe-receiver\":9,\"./transport/iframe\":21,\"./utils/event\":45,\"events\":2,\"inherits\":53,\"json3\":54}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  , urlUtils = _dereq_('./utils/url')\n  , XDR = _dereq_('./transport/sender/xdr')\n  , XHRCors = _dereq_('./transport/sender/xhr-cors')\n  , XHRLocal = _dereq_('./transport/sender/xhr-local')\n  , XHRFake = _dereq_('./transport/sender/xhr-fake')\n  , InfoIframe = _dereq_('./info-iframe')\n  , InfoAjax = _dereq_('./info-ajax')\n  ;\n\nfunction InfoReceiver(baseUrl, urlInfo) {\n  var self = this;\n  EventEmitter.call(this);\n\n  setTimeout(function() {\n    self.doXhr(baseUrl, urlInfo);\n  }, 0);\n}\n\ninherits(InfoReceiver, EventEmitter);\n\n// TODO this is currently ignoring the list of available transports and the whitelist\n\nInfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {\n  // determine method of CORS support (if needed)\n  if (urlInfo.sameOrigin) {\n    return new InfoAjax(url, XHRLocal);\n  }\n  if (XHRCors.enabled) {\n    return new InfoAjax(url, XHRCors);\n  }\n  if (XDR.enabled && urlInfo.sameScheme) {\n    return new InfoAjax(url, XDR);\n  }\n  if (InfoIframe.enabled()) {\n    return new InfoIframe(baseUrl, url);\n  }\n  return new InfoAjax(url, XHRFake);\n};\n\nInfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {\n  var self = this\n    , url = urlUtils.addPath(baseUrl, '/info')\n    ;\n\n  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);\n\n  this.timeoutRef = setTimeout(function() {\n    self._cleanup(false);\n    self.emit('finish');\n  }, InfoReceiver.timeout);\n\n  this.xo.once('finish', function(info, rtt) {\n    self._cleanup(true);\n    self.emit('finish', info, rtt);\n  });\n};\n\nInfoReceiver.prototype._cleanup = function(wasClean) {\n  clearTimeout(this.timeoutRef);\n  this.timeoutRef = null;\n  if (!wasClean && this.xo) {\n    this.xo.close();\n  }\n  this.xo = null;\n};\n\nInfoReceiver.prototype.close = function() {\n  this.removeAllListeners();\n  this._cleanup(false);\n};\n\nInfoReceiver.timeout = 8000;\n\nmodule.exports = InfoReceiver;\n\n},{\"./info-ajax\":8,\"./info-iframe\":10,\"./transport/sender/xdr\":33,\"./transport/sender/xhr-cors\":34,\"./transport/sender/xhr-fake\":35,\"./transport/sender/xhr-local\":36,\"./utils/url\":51,\"events\":2,\"inherits\":53}],12:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = global.location || {\n  origin: 'http://localhost:80'\n, protocol: 'http'\n, host: 'localhost'\n, port: 80\n, href: 'http://localhost/'\n, hash: ''\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\n_dereq_('./shims');\n\nvar URL = _dereq_('url-parse')\n  , inherits = _dereq_('inherits')\n  , JSON3 = _dereq_('json3')\n  , random = _dereq_('./utils/random')\n  , escape = _dereq_('./utils/escape')\n  , urlUtils = _dereq_('./utils/url')\n  , eventUtils = _dereq_('./utils/event')\n  , transport = _dereq_('./utils/transport')\n  , objectUtils = _dereq_('./utils/object')\n  , browser = _dereq_('./utils/browser')\n  , log = _dereq_('./utils/log')\n  , Event = _dereq_('./event/event')\n  , EventTarget = _dereq_('./event/eventtarget')\n  , loc = _dereq_('./location')\n  , CloseEvent = _dereq_('./event/close')\n  , TransportMessageEvent = _dereq_('./event/trans-message')\n  , InfoReceiver = _dereq_('./info-receiver')\n  ;\n\nvar transports;\n\n// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface\nfunction SockJS(url, protocols, options) {\n  if (!(this instanceof SockJS)) {\n    return new SockJS(url, protocols, options);\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'SockJS: 1 argument required, but only 0 present\");\n  }\n  EventTarget.call(this);\n\n  this.readyState = SockJS.CONNECTING;\n  this.extensions = '';\n  this.protocol = '';\n\n  // non-standard extension\n  options = options || {};\n  if (options.protocols_whitelist) {\n    log.warn(\"'protocols_whitelist' is DEPRECATED. Use 'transports' instead.\");\n  }\n  this._transportsWhitelist = options.transports;\n  this._transportOptions = options.transportOptions || {};\n\n  var sessionId = options.sessionId || 8;\n  if (typeof sessionId === 'function') {\n    this._generateSessionId = sessionId;\n  } else if (typeof sessionId === 'number') {\n    this._generateSessionId = function() {\n      return random.string(sessionId);\n    };\n  } else {\n    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');\n  }\n\n  this._server = options.server || random.numberString(1000);\n\n  // Step 1 of WS spec - parse and validate the url. Issue #8\n  var parsedUrl = new URL(url);\n  if (!parsedUrl.host || !parsedUrl.protocol) {\n    throw new SyntaxError(\"The URL '\" + url + \"' is invalid\");\n  } else if (parsedUrl.hash) {\n    throw new SyntaxError('The URL must not contain a fragment');\n  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {\n    throw new SyntaxError(\"The URL's scheme must be either 'http:' or 'https:'. '\" + parsedUrl.protocol + \"' is not allowed.\");\n  }\n\n  var secure = parsedUrl.protocol === 'https:';\n  // Step 2 - don't allow secure origin with an insecure protocol\n  if (loc.protocol === 'https' && !secure) {\n    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');\n  }\n\n  // Step 3 - check port access - no need here\n  // Step 4 - parse protocols argument\n  if (!protocols) {\n    protocols = [];\n  } else if (!Array.isArray(protocols)) {\n    protocols = [protocols];\n  }\n\n  // Step 5 - check protocols argument\n  var sortedProtocols = protocols.sort();\n  sortedProtocols.forEach(function(proto, i) {\n    if (!proto) {\n      throw new SyntaxError(\"The protocols entry '\" + proto + \"' is invalid.\");\n    }\n    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {\n      throw new SyntaxError(\"The protocols entry '\" + proto + \"' is duplicated.\");\n    }\n  });\n\n  // Step 6 - convert origin\n  var o = urlUtils.getOrigin(loc.href);\n  this._origin = o ? o.toLowerCase() : null;\n\n  // remove the trailing slash\n  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\\/+$/, ''));\n\n  // store the sanitized url\n  this.url = parsedUrl.href;\n\n  // Step 7 - start connection in background\n  // obtain server info\n  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26\n  this._urlInfo = {\n    nullOrigin: !browser.hasDomain()\n  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)\n  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)\n  };\n\n  this._ir = new InfoReceiver(this.url, this._urlInfo);\n  this._ir.once('finish', this._receiveInfo.bind(this));\n}\n\ninherits(SockJS, EventTarget);\n\nfunction userSetCode(code) {\n  return code === 1000 || (code >= 3000 && code <= 4999);\n}\n\nSockJS.prototype.close = function(code, reason) {\n  // Step 1\n  if (code && !userSetCode(code)) {\n    throw new Error('InvalidAccessError: Invalid code');\n  }\n  // Step 2.4 states the max is 123 bytes, but we are just checking length\n  if (reason && reason.length > 123) {\n    throw new SyntaxError('reason argument has an invalid length');\n  }\n\n  // Step 3.1\n  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {\n    return;\n  }\n\n  // TODO look at docs to determine how to set this\n  var wasClean = true;\n  this._close(code || 1000, reason || 'Normal closure', wasClean);\n};\n\nSockJS.prototype.send = function(data) {\n  // #13 - convert anything non-string to string\n  // TODO this currently turns objects into [object Object]\n  if (typeof data !== 'string') {\n    data = '' + data;\n  }\n  if (this.readyState === SockJS.CONNECTING) {\n    throw new Error('InvalidStateError: The connection has not been established yet');\n  }\n  if (this.readyState !== SockJS.OPEN) {\n    return;\n  }\n  this._transport.send(escape.quote(data));\n};\n\nSockJS.version = _dereq_('./version');\n\nSockJS.CONNECTING = 0;\nSockJS.OPEN = 1;\nSockJS.CLOSING = 2;\nSockJS.CLOSED = 3;\n\nSockJS.prototype._receiveInfo = function(info, rtt) {\n  this._ir = null;\n  if (!info) {\n    this._close(1002, 'Cannot connect to server');\n    return;\n  }\n\n  // establish a round-trip timeout (RTO) based on the\n  // round-trip time (RTT)\n  this._rto = this.countRTO(rtt);\n  // allow server to override url used for the actual transport\n  this._transUrl = info.base_url ? info.base_url : this.url;\n  info = objectUtils.extend(info, this._urlInfo);\n  // determine list of desired and supported transports\n  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);\n  this._transports = enabledTransports.main;\n\n  this._connect();\n};\n\nSockJS.prototype._connect = function() {\n  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {\n    if (Transport.needBody) {\n      if (!global.document.body ||\n          (typeof global.document.readyState !== 'undefined' &&\n            global.document.readyState !== 'complete' &&\n            global.document.readyState !== 'interactive')) {\n        this._transports.unshift(Transport);\n        eventUtils.attachEvent('load', this._connect.bind(this));\n        return;\n      }\n    }\n\n    // calculate timeout based on RTO and round trips. Default to 5s\n    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;\n    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);\n\n    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());\n    var options = this._transportOptions[Transport.transportName];\n    var transportObj = new Transport(transportUrl, this._transUrl, options);\n    transportObj.on('message', this._transportMessage.bind(this));\n    transportObj.once('close', this._transportClose.bind(this));\n    transportObj.transportName = Transport.transportName;\n    this._transport = transportObj;\n\n    return;\n  }\n  this._close(2000, 'All transports failed', false);\n};\n\nSockJS.prototype._transportTimeout = function() {\n  if (this.readyState === SockJS.CONNECTING) {\n    this._transportClose(2007, 'Transport timed out');\n  }\n};\n\nSockJS.prototype._transportMessage = function(msg) {\n  var self = this\n    , type = msg.slice(0, 1)\n    , content = msg.slice(1)\n    , payload\n    ;\n\n  // first check for messages that don't need a payload\n  switch (type) {\n    case 'o':\n      this._open();\n      return;\n    case 'h':\n      this.dispatchEvent(new Event('heartbeat'));\n      return;\n  }\n\n  if (content) {\n    try {\n      payload = JSON3.parse(content);\n    } catch (e) {\n    }\n  }\n\n  if (typeof payload === 'undefined') {\n    return;\n  }\n\n  switch (type) {\n    case 'a':\n      if (Array.isArray(payload)) {\n        payload.forEach(function(p) {\n          self.dispatchEvent(new TransportMessageEvent(p));\n        });\n      }\n      break;\n    case 'm':\n      this.dispatchEvent(new TransportMessageEvent(payload));\n      break;\n    case 'c':\n      if (Array.isArray(payload) && payload.length === 2) {\n        this._close(payload[0], payload[1], true);\n      }\n      break;\n  }\n};\n\nSockJS.prototype._transportClose = function(code, reason) {\n  if (this._transport) {\n    this._transport.removeAllListeners();\n    this._transport = null;\n    this.transport = null;\n  }\n\n  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {\n    this._connect();\n    return;\n  }\n\n  this._close(code, reason);\n};\n\nSockJS.prototype._open = function() {\n  if (this.readyState === SockJS.CONNECTING) {\n    if (this._transportTimeoutId) {\n      clearTimeout(this._transportTimeoutId);\n      this._transportTimeoutId = null;\n    }\n    this.readyState = SockJS.OPEN;\n    this.transport = this._transport.transportName;\n    this.dispatchEvent(new Event('open'));\n  } else {\n    // The server might have been restarted, and lost track of our\n    // connection.\n    this._close(1006, 'Server lost session');\n  }\n};\n\nSockJS.prototype._close = function(code, reason, wasClean) {\n  var forceFail = false;\n\n  if (this._ir) {\n    forceFail = true;\n    this._ir.close();\n    this._ir = null;\n  }\n  if (this._transport) {\n    this._transport.close();\n    this._transport = null;\n    this.transport = null;\n  }\n\n  if (this.readyState === SockJS.CLOSED) {\n    throw new Error('InvalidStateError: SockJS has already been closed');\n  }\n\n  this.readyState = SockJS.CLOSING;\n  setTimeout(function() {\n    this.readyState = SockJS.CLOSED;\n\n    if (forceFail) {\n      this.dispatchEvent(new Event('error'));\n    }\n\n    var e = new CloseEvent('close');\n    e.wasClean = wasClean || false;\n    e.code = code || 1000;\n    e.reason = reason;\n\n    this.dispatchEvent(e);\n    this.onmessage = this.onclose = this.onerror = null;\n  }.bind(this), 0);\n};\n\n// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/\n// and RFC 2988.\nSockJS.prototype.countRTO = function(rtt) {\n  // In a local environment, when using IE8/9 and the `jsonp-polling`\n  // transport the time needed to establish a connection (the time that pass\n  // from the opening of the transport to the call of `_dispatchOpen`) is\n  // around 200msec (the lower bound used in the article above) and this\n  // causes spurious timeouts. For this reason we calculate a value slightly\n  // larger than that used in the article.\n  if (rtt > 100) {\n    return 4 * rtt; // rto > 400msec\n  }\n  return 300 + rtt; // 300msec < rto <= 400msec\n};\n\nmodule.exports = function(availableTransports) {\n  transports = transport(availableTransports);\n  _dereq_('./iframe-bootstrap')(SockJS, availableTransports);\n  return SockJS;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./event/close\":1,\"./event/event\":3,\"./event/eventtarget\":4,\"./event/trans-message\":5,\"./iframe-bootstrap\":7,\"./info-receiver\":11,\"./location\":12,\"./shims\":14,\"./utils/browser\":43,\"./utils/escape\":44,\"./utils/event\":45,\"./utils/log\":47,\"./utils/object\":48,\"./utils/random\":49,\"./utils/transport\":50,\"./utils/url\":51,\"./version\":52,\"inherits\":53,\"json3\":54,\"url-parse\":57}],14:[function(_dereq_,module,exports){\n/* eslint-disable */\n/* jscs: disable */\n'use strict';\n\n// pulled specific shims from https://github.com/es-shims/es5-shim\n\nvar ArrayPrototype = Array.prototype;\nvar ObjectPrototype = Object.prototype;\nvar FunctionPrototype = Function.prototype;\nvar StringPrototype = String.prototype;\nvar array_slice = ArrayPrototype.slice;\n\nvar _toString = ObjectPrototype.toString;\nvar isFunction = function (val) {\n    return ObjectPrototype.toString.call(val) === '[object Function]';\n};\nvar isArray = function isArray(obj) {\n    return _toString.call(obj) === '[object Array]';\n};\nvar isString = function isString(obj) {\n    return _toString.call(obj) === '[object String]';\n};\n\nvar supportsDescriptors = Object.defineProperty && (function () {\n    try {\n        Object.defineProperty({}, 'x', {});\n        return true;\n    } catch (e) { /* this is ES3 */\n        return false;\n    }\n}());\n\n// Define configurable, writable and non-enumerable props\n// if they don't exist.\nvar defineProperty;\nif (supportsDescriptors) {\n    defineProperty = function (object, name, method, forceAssign) {\n        if (!forceAssign && (name in object)) { return; }\n        Object.defineProperty(object, name, {\n            configurable: true,\n            enumerable: false,\n            writable: true,\n            value: method\n        });\n    };\n} else {\n    defineProperty = function (object, name, method, forceAssign) {\n        if (!forceAssign && (name in object)) { return; }\n        object[name] = method;\n    };\n}\nvar defineProperties = function (object, map, forceAssign) {\n    for (var name in map) {\n        if (ObjectPrototype.hasOwnProperty.call(map, name)) {\n          defineProperty(object, name, map[name], forceAssign);\n        }\n    }\n};\n\nvar toObject = function (o) {\n    if (o == null) { // this matches both null and undefined\n        throw new TypeError(\"can't convert \" + o + ' to object');\n    }\n    return Object(o);\n};\n\n//\n// Util\n// ======\n//\n\n// ES5 9.4\n// http://es5.github.com/#x9.4\n// http://jsperf.com/to-integer\n\nfunction toInteger(num) {\n    var n = +num;\n    if (n !== n) { // isNaN\n        n = 0;\n    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n    }\n    return n;\n}\n\nfunction ToUint32(x) {\n    return x >>> 0;\n}\n\n//\n// Function\n// ========\n//\n\n// ES-5 15.3.4.5\n// http://es5.github.com/#x15.3.4.5\n\nfunction Empty() {}\n\ndefineProperties(FunctionPrototype, {\n    bind: function bind(that) { // .length is 1\n        // 1. Let Target be the this value.\n        var target = this;\n        // 2. If IsCallable(Target) is false, throw a TypeError exception.\n        if (!isFunction(target)) {\n            throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        }\n        // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n        var binder = function () {\n\n            if (this instanceof bound) {\n                // 15.3.4.5.2 [[Construct]]\n                // When the [[Construct]] internal method of a function object,\n                // F that was created using the bind function is called with a\n                // list of arguments ExtraArgs, the following steps are taken:\n                // 1. Let target be the value of F's [[TargetFunction]]\n                //   internal property.\n                // 2. If target has no [[Construct]] internal method, a\n                //   TypeError exception is thrown.\n                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Construct]] internal\n                //   method of target providing args as the arguments.\n\n                var result = target.apply(\n                    this,\n                    args.concat(array_slice.call(arguments))\n                );\n                if (Object(result) === result) {\n                    return result;\n                }\n                return this;\n\n            } else {\n                // 15.3.4.5.1 [[Call]]\n                // When the [[Call]] internal method of a function object, F,\n                // which was created using the bind function is called with a\n                // this value and a list of arguments ExtraArgs, the following\n                // steps are taken:\n                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n                //   property.\n                // 2. Let boundThis be the value of F's [[BoundThis]] internal\n                //   property.\n                // 3. Let target be the value of F's [[TargetFunction]] internal\n                //   property.\n                // 4. Let args be a new list containing the same values as the\n                //   list boundArgs in the same order followed by the same\n                //   values as the list ExtraArgs in the same order.\n                // 5. Return the result of calling the [[Call]] internal method\n                //   of target providing boundThis as the this value and\n                //   providing args as the arguments.\n\n                // equiv: target.call(this, ...boundArgs, ...args)\n                return target.apply(\n                    that,\n                    args.concat(array_slice.call(arguments))\n                );\n\n            }\n\n        };\n\n        // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n        var boundLength = Math.max(0, target.length - args.length);\n\n        // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n        var boundArgs = [];\n        for (var i = 0; i < boundLength; i++) {\n            boundArgs.push('$' + i);\n        }\n\n        // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n            Empty.prototype = target.prototype;\n            bound.prototype = new Empty();\n            // Clean up dangling references.\n            Empty.prototype = null;\n        }\n\n        // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n\n        // 22. Return F.\n        return bound;\n    }\n});\n\n//\n// Array\n// =====\n//\n\n// ES5 15.4.3.2\n// http://es5.github.com/#x15.4.3.2\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray\ndefineProperties(Array, { isArray: isArray });\n\nvar boxedString = Object('a');\nvar splitString = boxedString[0] !== 'a' || !(0 in boxedString);\n\nvar properlyBoxesContext = function properlyBoxed(method) {\n    // Check node 0.6.21 bug where third parameter is not boxed\n    var properlyBoxesNonStrict = true;\n    var properlyBoxesStrict = true;\n    if (method) {\n        method.call('foo', function (_, __, context) {\n            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }\n        });\n\n        method.call([1], function () {\n            'use strict';\n            properlyBoxesStrict = typeof this === 'string';\n        }, 'x');\n    }\n    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;\n};\n\ndefineProperties(ArrayPrototype, {\n    forEach: function forEach(fun /*, thisp*/) {\n        var object = toObject(this),\n            self = splitString && isString(this) ? this.split('') : object,\n            thisp = arguments[1],\n            i = -1,\n            length = self.length >>> 0;\n\n        // If no callback function or if callback is not a callable function\n        if (!isFunction(fun)) {\n            throw new TypeError(); // TODO message\n        }\n\n        while (++i < length) {\n            if (i in self) {\n                // Invoke the callback function with call, passing arguments:\n                // context, property value, property key, thisArg object\n                // context\n                fun.call(thisp, self[i], i, object);\n            }\n        }\n    }\n}, !properlyBoxesContext(ArrayPrototype.forEach));\n\n// ES5 15.4.4.14\n// http://es5.github.com/#x15.4.4.14\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\nvar hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;\ndefineProperties(ArrayPrototype, {\n    indexOf: function indexOf(sought /*, fromIndex */ ) {\n        var self = splitString && isString(this) ? this.split('') : toObject(this),\n            length = self.length >>> 0;\n\n        if (!length) {\n            return -1;\n        }\n\n        var i = 0;\n        if (arguments.length > 1) {\n            i = toInteger(arguments[1]);\n        }\n\n        // handle negative indices\n        i = i >= 0 ? i : Math.max(0, length + i);\n        for (; i < length; i++) {\n            if (i in self && self[i] === sought) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}, hasFirefox2IndexOfBug);\n\n//\n// String\n// ======\n//\n\n// ES5 15.5.4.14\n// http://es5.github.com/#x15.5.4.14\n\n// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]\n// Many browsers do not split properly with regular expressions or they\n// do not perform the split correctly under obscure conditions.\n// See http://blog.stevenlevithan.com/archives/cross-browser-split\n// I've tested in many browsers and this seems to cover the deviant ones:\n//    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]\n//    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]\n//    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not\n//       [undefined, \"t\", undefined, \"e\", ...]\n//    ''.split(/.?/) should be [], not [\"\"]\n//    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]\n\nvar string_split = StringPrototype.split;\nif (\n    'ab'.split(/(?:ab)*/).length !== 2 ||\n    '.'.split(/(.?)(.?)/).length !== 4 ||\n    'tesst'.split(/(s)*/)[1] === 't' ||\n    'test'.split(/(?:)/, -1).length !== 4 ||\n    ''.split(/.?/).length ||\n    '.'.split(/()()/).length > 1\n) {\n    (function () {\n        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group\n\n        StringPrototype.split = function (separator, limit) {\n            var string = this;\n            if (separator === void 0 && limit === 0) {\n                return [];\n            }\n\n            // If `separator` is not a regex, use native split\n            if (_toString.call(separator) !== '[object RegExp]') {\n                return string_split.call(this, separator, limit);\n            }\n\n            var output = [],\n                flags = (separator.ignoreCase ? 'i' : '') +\n                        (separator.multiline  ? 'm' : '') +\n                        (separator.extended   ? 'x' : '') + // Proposed for ES6\n                        (separator.sticky     ? 'y' : ''), // Firefox 3+\n                lastLastIndex = 0,\n                // Make `global` and avoid `lastIndex` issues by working with a copy\n                separator2, match, lastIndex, lastLength;\n            separator = new RegExp(separator.source, flags + 'g');\n            string += ''; // Type-convert\n            if (!compliantExecNpcg) {\n                // Doesn't need flags gy, but they don't hurt\n                separator2 = new RegExp('^' + separator.source + '$(?!\\\\s)', flags);\n            }\n            /* Values for `limit`, per the spec:\n             * If undefined: 4294967295 // Math.pow(2, 32) - 1\n             * If 0, Infinity, or NaN: 0\n             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n             * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n             * If other: Type-convert, then use the above rules\n             */\n            limit = limit === void 0 ?\n                -1 >>> 0 : // Math.pow(2, 32) - 1\n                ToUint32(limit);\n            while (match = separator.exec(string)) {\n                // `separator.lastIndex` is not reliable cross-browser\n                lastIndex = match.index + match[0].length;\n                if (lastIndex > lastLastIndex) {\n                    output.push(string.slice(lastLastIndex, match.index));\n                    // Fix browsers whose `exec` methods don't consistently return `undefined` for\n                    // nonparticipating capturing groups\n                    if (!compliantExecNpcg && match.length > 1) {\n                        match[0].replace(separator2, function () {\n                            for (var i = 1; i < arguments.length - 2; i++) {\n                                if (arguments[i] === void 0) {\n                                    match[i] = void 0;\n                                }\n                            }\n                        });\n                    }\n                    if (match.length > 1 && match.index < string.length) {\n                        ArrayPrototype.push.apply(output, match.slice(1));\n                    }\n                    lastLength = match[0].length;\n                    lastLastIndex = lastIndex;\n                    if (output.length >= limit) {\n                        break;\n                    }\n                }\n                if (separator.lastIndex === match.index) {\n                    separator.lastIndex++; // Avoid an infinite loop\n                }\n            }\n            if (lastLastIndex === string.length) {\n                if (lastLength || !separator.test('')) {\n                    output.push('');\n                }\n            } else {\n                output.push(string.slice(lastLastIndex));\n            }\n            return output.length > limit ? output.slice(0, limit) : output;\n        };\n    }());\n\n// [bugfix, chrome]\n// If separator is undefined, then the result array contains just one String,\n// which is the this value (converted to a String). If limit is not undefined,\n// then the output array is truncated so that it contains no more than limit\n// elements.\n// \"0\".split(undefined, 0) -> []\n} else if ('0'.split(void 0, 0).length) {\n    StringPrototype.split = function split(separator, limit) {\n        if (separator === void 0 && limit === 0) { return []; }\n        return string_split.call(this, separator, limit);\n    };\n}\n\n// ECMA-262, 3rd B.2.3\n// Not an ECMAScript standard, although ECMAScript 3rd Edition has a\n// non-normative section suggesting uniform semantics and it should be\n// normalized across all browsers\n// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE\nvar string_substr = StringPrototype.substr;\nvar hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';\ndefineProperties(StringPrototype, {\n    substr: function substr(start, length) {\n        return string_substr.call(\n            this,\n            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,\n            length\n        );\n    }\n}, hasNegativeSubstrBug);\n\n},{}],15:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = [\n  // streaming transports\n  _dereq_('./transport/websocket')\n, _dereq_('./transport/xhr-streaming')\n, _dereq_('./transport/xdr-streaming')\n, _dereq_('./transport/eventsource')\n, _dereq_('./transport/lib/iframe-wrap')(_dereq_('./transport/eventsource'))\n\n  // polling transports\n, _dereq_('./transport/htmlfile')\n, _dereq_('./transport/lib/iframe-wrap')(_dereq_('./transport/htmlfile'))\n, _dereq_('./transport/xhr-polling')\n, _dereq_('./transport/xdr-polling')\n, _dereq_('./transport/lib/iframe-wrap')(_dereq_('./transport/xhr-polling'))\n, _dereq_('./transport/jsonp-polling')\n];\n\n},{\"./transport/eventsource\":19,\"./transport/htmlfile\":20,\"./transport/jsonp-polling\":22,\"./transport/lib/iframe-wrap\":25,\"./transport/websocket\":37,\"./transport/xdr-polling\":38,\"./transport/xdr-streaming\":39,\"./transport/xhr-polling\":40,\"./transport/xhr-streaming\":41}],16:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  , utils = _dereq_('../../utils/event')\n  , urlUtils = _dereq_('../../utils/url')\n  , XHR = global.XMLHttpRequest\n  ;\n\nfunction AbstractXHRObject(method, url, payload, opts) {\n  var self = this;\n  EventEmitter.call(this);\n\n  setTimeout(function () {\n    self._start(method, url, payload, opts);\n  }, 0);\n}\n\ninherits(AbstractXHRObject, EventEmitter);\n\nAbstractXHRObject.prototype._start = function(method, url, payload, opts) {\n  var self = this;\n\n  try {\n    this.xhr = new XHR();\n  } catch (x) {\n    // intentionally empty\n  }\n\n  if (!this.xhr) {\n    this.emit('finish', 0, 'no xhr support');\n    this._cleanup();\n    return;\n  }\n\n  // several browsers cache POSTs\n  url = urlUtils.addQuery(url, 't=' + (+new Date()));\n\n  // Explorer tends to keep connection open, even after the\n  // tab gets closed: http://bugs.jquery.com/ticket/5280\n  this.unloadRef = utils.unloadAdd(function() {\n    self._cleanup(true);\n  });\n  try {\n    this.xhr.open(method, url, true);\n    if (this.timeout && 'timeout' in this.xhr) {\n      this.xhr.timeout = this.timeout;\n      this.xhr.ontimeout = function() {\n        self.emit('finish', 0, '');\n        self._cleanup(false);\n      };\n    }\n  } catch (e) {\n    // IE raises an exception on wrong port.\n    this.emit('finish', 0, '');\n    this._cleanup(false);\n    return;\n  }\n\n  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {\n    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :\n    // \"This never affects same-site requests.\"\n\n    this.xhr.withCredentials = 'true';\n  }\n  if (opts && opts.headers) {\n    for (var key in opts.headers) {\n      this.xhr.setRequestHeader(key, opts.headers[key]);\n    }\n  }\n\n  this.xhr.onreadystatechange = function() {\n    if (self.xhr) {\n      var x = self.xhr;\n      var text, status;\n      switch (x.readyState) {\n      case 3:\n        // IE doesn't like peeking into responseText or status\n        // on Microsoft.XMLHTTP and readystate=3\n        try {\n          status = x.status;\n          text = x.responseText;\n        } catch (e) {\n          // intentionally empty\n        }\n        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\n        if (status === 1223) {\n          status = 204;\n        }\n\n        // IE does return readystate == 3 for 404 answers.\n        if (status === 200 && text && text.length > 0) {\n          self.emit('chunk', status, text);\n        }\n        break;\n      case 4:\n        status = x.status;\n        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\n        if (status === 1223) {\n          status = 204;\n        }\n        // IE returns this for a bad port\n        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx\n        if (status === 12005 || status === 12029) {\n          status = 0;\n        }\n\n        self.emit('finish', status, x.responseText);\n        self._cleanup(false);\n        break;\n      }\n    }\n  };\n\n  try {\n    self.xhr.send(payload);\n  } catch (e) {\n    self.emit('finish', 0, '');\n    self._cleanup(false);\n  }\n};\n\nAbstractXHRObject.prototype._cleanup = function(abort) {\n  if (!this.xhr) {\n    return;\n  }\n  this.removeAllListeners();\n  utils.unloadDel(this.unloadRef);\n\n  // IE needs this field to be a function\n  this.xhr.onreadystatechange = function() {};\n  if (this.xhr.ontimeout) {\n    this.xhr.ontimeout = null;\n  }\n\n  if (abort) {\n    try {\n      this.xhr.abort();\n    } catch (x) {\n      // intentionally empty\n    }\n  }\n  this.unloadRef = this.xhr = null;\n};\n\nAbstractXHRObject.prototype.close = function() {\n  this._cleanup(true);\n};\n\nAbstractXHRObject.enabled = !!XHR;\n// override XMLHttpRequest for IE6/7\n// obfuscate to avoid firewalls\nvar axo = ['Active'].concat('Object').join('X');\nif (!AbstractXHRObject.enabled && (axo in global)) {\n  XHR = function() {\n    try {\n      return new global[axo]('Microsoft.XMLHTTP');\n    } catch (e) {\n      return null;\n    }\n  };\n  AbstractXHRObject.enabled = !!new XHR();\n}\n\nvar cors = false;\ntry {\n  cors = 'withCredentials' in new XHR();\n} catch (ignored) {\n  // intentionally empty\n}\n\nAbstractXHRObject.supportsCORS = cors;\n\nmodule.exports = AbstractXHRObject;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/event\":45,\"../../utils/url\":51,\"events\":2,\"inherits\":53}],17:[function(_dereq_,module,exports){\n(function (global){\nmodule.exports = global.EventSource;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],18:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar Driver = global.WebSocket || global.MozWebSocket;\nif (Driver) {\n\tmodule.exports = function WebSocketBrowserDriver(url) {\n\t\treturn new Driver(url);\n\t};\n} else {\n\tmodule.exports = undefined;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],19:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  , EventSourceReceiver = _dereq_('./receiver/eventsource')\n  , XHRCorsObject = _dereq_('./sender/xhr-cors')\n  , EventSourceDriver = _dereq_('eventsource')\n  ;\n\nfunction EventSourceTransport(transUrl) {\n  if (!EventSourceTransport.enabled()) {\n    throw new Error('Transport created when disabled');\n  }\n\n  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);\n}\n\ninherits(EventSourceTransport, AjaxBasedTransport);\n\nEventSourceTransport.enabled = function() {\n  return !!EventSourceDriver;\n};\n\nEventSourceTransport.transportName = 'eventsource';\nEventSourceTransport.roundTrips = 2;\n\nmodule.exports = EventSourceTransport;\n\n},{\"./lib/ajax-based\":23,\"./receiver/eventsource\":28,\"./sender/xhr-cors\":34,\"eventsource\":17,\"inherits\":53}],20:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , HtmlfileReceiver = _dereq_('./receiver/htmlfile')\n  , XHRLocalObject = _dereq_('./sender/xhr-local')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  ;\n\nfunction HtmlFileTransport(transUrl) {\n  if (!HtmlfileReceiver.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);\n}\n\ninherits(HtmlFileTransport, AjaxBasedTransport);\n\nHtmlFileTransport.enabled = function(info) {\n  return HtmlfileReceiver.enabled && info.sameOrigin;\n};\n\nHtmlFileTransport.transportName = 'htmlfile';\nHtmlFileTransport.roundTrips = 2;\n\nmodule.exports = HtmlFileTransport;\n\n},{\"./lib/ajax-based\":23,\"./receiver/htmlfile\":29,\"./sender/xhr-local\":36,\"inherits\":53}],21:[function(_dereq_,module,exports){\n'use strict';\n\n// Few cool transports do work only for same-origin. In order to make\n// them work cross-domain we shall use iframe, served from the\n// remote domain. New browsers have capabilities to communicate with\n// cross domain iframe using postMessage(). In IE it was implemented\n// from IE 8+, but of course, IE got some details wrong:\n//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx\n//    http://stevesouders.com/misc/test-postmessage.php\n\nvar inherits = _dereq_('inherits')\n  , JSON3 = _dereq_('json3')\n  , EventEmitter = _dereq_('events').EventEmitter\n  , version = _dereq_('../version')\n  , urlUtils = _dereq_('../utils/url')\n  , iframeUtils = _dereq_('../utils/iframe')\n  , eventUtils = _dereq_('../utils/event')\n  , random = _dereq_('../utils/random')\n  ;\n\nfunction IframeTransport(transport, transUrl, baseUrl) {\n  if (!IframeTransport.enabled()) {\n    throw new Error('Transport created when disabled');\n  }\n  EventEmitter.call(this);\n\n  var self = this;\n  this.origin = urlUtils.getOrigin(baseUrl);\n  this.baseUrl = baseUrl;\n  this.transUrl = transUrl;\n  this.transport = transport;\n  this.windowId = random.string(8);\n\n  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;\n\n  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {\n    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');\n    self.close();\n  });\n\n  this.onmessageCallback = this._message.bind(this);\n  eventUtils.attachEvent('message', this.onmessageCallback);\n}\n\ninherits(IframeTransport, EventEmitter);\n\nIframeTransport.prototype.close = function() {\n  this.removeAllListeners();\n  if (this.iframeObj) {\n    eventUtils.detachEvent('message', this.onmessageCallback);\n    try {\n      // When the iframe is not loaded, IE raises an exception\n      // on 'contentWindow'.\n      this.postMessage('c');\n    } catch (x) {\n      // intentionally empty\n    }\n    this.iframeObj.cleanup();\n    this.iframeObj = null;\n    this.onmessageCallback = this.iframeObj = null;\n  }\n};\n\nIframeTransport.prototype._message = function(e) {\n  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {\n    return;\n  }\n\n  var iframeMessage;\n  try {\n    iframeMessage = JSON3.parse(e.data);\n  } catch (ignored) {\n    return;\n  }\n\n  if (iframeMessage.windowId !== this.windowId) {\n    return;\n  }\n\n  switch (iframeMessage.type) {\n  case 's':\n    this.iframeObj.loaded();\n    // window global dependency\n    this.postMessage('s', JSON3.stringify([\n      version\n    , this.transport\n    , this.transUrl\n    , this.baseUrl\n    ]));\n    break;\n  case 't':\n    this.emit('message', iframeMessage.data);\n    break;\n  case 'c':\n    var cdata;\n    try {\n      cdata = JSON3.parse(iframeMessage.data);\n    } catch (ignored) {\n      return;\n    }\n    this.emit('close', cdata[0], cdata[1]);\n    this.close();\n    break;\n  }\n};\n\nIframeTransport.prototype.postMessage = function(type, data) {\n  this.iframeObj.post(JSON3.stringify({\n    windowId: this.windowId\n  , type: type\n  , data: data || ''\n  }), this.origin);\n};\n\nIframeTransport.prototype.send = function(message) {\n  this.postMessage('m', message);\n};\n\nIframeTransport.enabled = function() {\n  return iframeUtils.iframeEnabled;\n};\n\nIframeTransport.transportName = 'iframe';\nIframeTransport.roundTrips = 2;\n\nmodule.exports = IframeTransport;\n\n},{\"../utils/event\":45,\"../utils/iframe\":46,\"../utils/random\":49,\"../utils/url\":51,\"../version\":52,\"events\":2,\"inherits\":53,\"json3\":54}],22:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\n// The simplest and most robust transport, using the well-know cross\n// domain hack - JSONP. This transport is quite inefficient - one\n// message could use up to one http request. But at least it works almost\n// everywhere.\n// Known limitations:\n//   o you will get a spinning cursor\n//   o for Konqueror a dumb timer is needed to detect errors\n\nvar inherits = _dereq_('inherits')\n  , SenderReceiver = _dereq_('./lib/sender-receiver')\n  , JsonpReceiver = _dereq_('./receiver/jsonp')\n  , jsonpSender = _dereq_('./sender/jsonp')\n  ;\n\nfunction JsonPTransport(transUrl) {\n  if (!JsonPTransport.enabled()) {\n    throw new Error('Transport created when disabled');\n  }\n  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);\n}\n\ninherits(JsonPTransport, SenderReceiver);\n\nJsonPTransport.enabled = function() {\n  return !!global.document;\n};\n\nJsonPTransport.transportName = 'jsonp-polling';\nJsonPTransport.roundTrips = 1;\nJsonPTransport.needBody = true;\n\nmodule.exports = JsonPTransport;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./lib/sender-receiver\":27,\"./receiver/jsonp\":30,\"./sender/jsonp\":32,\"inherits\":53}],23:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , urlUtils = _dereq_('../../utils/url')\n  , SenderReceiver = _dereq_('./sender-receiver')\n  ;\n\nfunction createAjaxSender(AjaxObject) {\n  return function(url, payload, callback) {\n    var opt = {};\n    if (typeof payload === 'string') {\n      opt.headers = {'Content-type': 'text/plain'};\n    }\n    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');\n    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);\n    xo.once('finish', function(status) {\n      xo = null;\n\n      if (status !== 200 && status !== 204) {\n        return callback(new Error('http status ' + status));\n      }\n      callback();\n    });\n    return function() {\n      xo.close();\n      xo = null;\n\n      var err = new Error('Aborted');\n      err.code = 1000;\n      callback(err);\n    };\n  };\n}\n\nfunction AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {\n  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);\n}\n\ninherits(AjaxBasedTransport, SenderReceiver);\n\nmodule.exports = AjaxBasedTransport;\n\n},{\"../../utils/url\":51,\"./sender-receiver\":27,\"inherits\":53}],24:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  ;\n\nfunction BufferedSender(url, sender) {\n  EventEmitter.call(this);\n  this.sendBuffer = [];\n  this.sender = sender;\n  this.url = url;\n}\n\ninherits(BufferedSender, EventEmitter);\n\nBufferedSender.prototype.send = function(message) {\n  this.sendBuffer.push(message);\n  if (!this.sendStop) {\n    this.sendSchedule();\n  }\n};\n\n// For polling transports in a situation when in the message callback,\n// new message is being send. If the sending connection was started\n// before receiving one, it is possible to saturate the network and\n// timeout due to the lack of receiving socket. To avoid that we delay\n// sending messages by some small time, in order to let receiving\n// connection be started beforehand. This is only a halfmeasure and\n// does not fix the big problem, but it does make the tests go more\n// stable on slow networks.\nBufferedSender.prototype.sendScheduleWait = function() {\n  var self = this;\n  var tref;\n  this.sendStop = function() {\n    self.sendStop = null;\n    clearTimeout(tref);\n  };\n  tref = setTimeout(function() {\n    self.sendStop = null;\n    self.sendSchedule();\n  }, 25);\n};\n\nBufferedSender.prototype.sendSchedule = function() {\n  var self = this;\n  if (this.sendBuffer.length > 0) {\n    var payload = '[' + this.sendBuffer.join(',') + ']';\n    this.sendStop = this.sender(this.url, payload, function(err) {\n      self.sendStop = null;\n      if (err) {\n        self.emit('close', err.code || 1006, 'Sending error: ' + err);\n        self.close();\n      } else {\n        self.sendScheduleWait();\n      }\n    });\n    this.sendBuffer = [];\n  }\n};\n\nBufferedSender.prototype._cleanup = function() {\n  this.removeAllListeners();\n};\n\nBufferedSender.prototype.close = function() {\n  this._cleanup();\n  if (this.sendStop) {\n    this.sendStop();\n    this.sendStop = null;\n  }\n};\n\nmodule.exports = BufferedSender;\n\n},{\"events\":2,\"inherits\":53}],25:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , IframeTransport = _dereq_('../iframe')\n  , objectUtils = _dereq_('../../utils/object')\n  ;\n\nmodule.exports = function(transport) {\n\n  function IframeWrapTransport(transUrl, baseUrl) {\n    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);\n  }\n\n  inherits(IframeWrapTransport, IframeTransport);\n\n  IframeWrapTransport.enabled = function(url, info) {\n    if (!global.document) {\n      return false;\n    }\n\n    var iframeInfo = objectUtils.extend({}, info);\n    iframeInfo.sameOrigin = true;\n    return transport.enabled(iframeInfo) && IframeTransport.enabled();\n  };\n\n  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;\n  IframeWrapTransport.needBody = true;\n  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)\n\n  IframeWrapTransport.facadeTransport = transport;\n\n  return IframeWrapTransport;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/object\":48,\"../iframe\":21,\"inherits\":53}],26:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  ;\n\nfunction Polling(Receiver, receiveUrl, AjaxObject) {\n  EventEmitter.call(this);\n  this.Receiver = Receiver;\n  this.receiveUrl = receiveUrl;\n  this.AjaxObject = AjaxObject;\n  this._scheduleReceiver();\n}\n\ninherits(Polling, EventEmitter);\n\nPolling.prototype._scheduleReceiver = function() {\n  var self = this;\n  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);\n\n  poll.on('message', function(msg) {\n    self.emit('message', msg);\n  });\n\n  poll.once('close', function(code, reason) {\n    self.poll = poll = null;\n\n    if (!self.pollIsClosing) {\n      if (reason === 'network') {\n        self._scheduleReceiver();\n      } else {\n        self.emit('close', code || 1006, reason);\n        self.removeAllListeners();\n      }\n    }\n  });\n};\n\nPolling.prototype.abort = function() {\n  this.removeAllListeners();\n  this.pollIsClosing = true;\n  if (this.poll) {\n    this.poll.abort();\n  }\n};\n\nmodule.exports = Polling;\n\n},{\"events\":2,\"inherits\":53}],27:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , urlUtils = _dereq_('../../utils/url')\n  , BufferedSender = _dereq_('./buffered-sender')\n  , Polling = _dereq_('./polling')\n  ;\n\nfunction SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {\n  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);\n  var self = this;\n  BufferedSender.call(this, transUrl, senderFunc);\n\n  this.poll = new Polling(Receiver, pollUrl, AjaxObject);\n  this.poll.on('message', function(msg) {\n    self.emit('message', msg);\n  });\n  this.poll.once('close', function(code, reason) {\n    self.poll = null;\n    self.emit('close', code, reason);\n    self.close();\n  });\n}\n\ninherits(SenderReceiver, BufferedSender);\n\nSenderReceiver.prototype.close = function() {\n  BufferedSender.prototype.close.call(this);\n  this.removeAllListeners();\n  if (this.poll) {\n    this.poll.abort();\n    this.poll = null;\n  }\n};\n\nmodule.exports = SenderReceiver;\n\n},{\"../../utils/url\":51,\"./buffered-sender\":24,\"./polling\":26,\"inherits\":53}],28:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  , EventSourceDriver = _dereq_('eventsource')\n  ;\n\nfunction EventSourceReceiver(url) {\n  EventEmitter.call(this);\n\n  var self = this;\n  var es = this.es = new EventSourceDriver(url);\n  es.onmessage = function(e) {\n    self.emit('message', decodeURI(e.data));\n  };\n  es.onerror = function(e) {\n    // ES on reconnection has readyState = 0 or 1.\n    // on network error it's CLOSED = 2\n    var reason = (es.readyState !== 2 ? 'network' : 'permanent');\n    self._cleanup();\n    self._close(reason);\n  };\n}\n\ninherits(EventSourceReceiver, EventEmitter);\n\nEventSourceReceiver.prototype.abort = function() {\n  this._cleanup();\n  this._close('user');\n};\n\nEventSourceReceiver.prototype._cleanup = function() {\n  var es = this.es;\n  if (es) {\n    es.onmessage = es.onerror = null;\n    es.close();\n    this.es = null;\n  }\n};\n\nEventSourceReceiver.prototype._close = function(reason) {\n  var self = this;\n  // Safari and chrome < 15 crash if we close window before\n  // waiting for ES cleanup. See:\n  // https://code.google.com/p/chromium/issues/detail?id=89155\n  setTimeout(function() {\n    self.emit('close', null, reason);\n    self.removeAllListeners();\n  }, 200);\n};\n\nmodule.exports = EventSourceReceiver;\n\n},{\"events\":2,\"eventsource\":17,\"inherits\":53}],29:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , iframeUtils = _dereq_('../../utils/iframe')\n  , urlUtils = _dereq_('../../utils/url')\n  , EventEmitter = _dereq_('events').EventEmitter\n  , random = _dereq_('../../utils/random')\n  ;\n\nfunction HtmlfileReceiver(url) {\n  EventEmitter.call(this);\n  var self = this;\n  iframeUtils.polluteGlobalNamespace();\n\n  this.id = 'a' + random.string(6);\n  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));\n\n  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?\n      iframeUtils.createHtmlfile : iframeUtils.createIframe;\n\n  global[iframeUtils.WPrefix][this.id] = {\n    start: function() {\n      self.iframeObj.loaded();\n    }\n  , message: function(data) {\n      self.emit('message', data);\n    }\n  , stop: function() {\n      self._cleanup();\n      self._close('network');\n    }\n  };\n  this.iframeObj = constructFunc(url, function() {\n    self._cleanup();\n    self._close('permanent');\n  });\n}\n\ninherits(HtmlfileReceiver, EventEmitter);\n\nHtmlfileReceiver.prototype.abort = function() {\n  this._cleanup();\n  this._close('user');\n};\n\nHtmlfileReceiver.prototype._cleanup = function() {\n  if (this.iframeObj) {\n    this.iframeObj.cleanup();\n    this.iframeObj = null;\n  }\n  delete global[iframeUtils.WPrefix][this.id];\n};\n\nHtmlfileReceiver.prototype._close = function(reason) {\n  this.emit('close', null, reason);\n  this.removeAllListeners();\n};\n\nHtmlfileReceiver.htmlfileEnabled = false;\n\n// obfuscate to avoid firewalls\nvar axo = ['Active'].concat('Object').join('X');\nif (axo in global) {\n  try {\n    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');\n  } catch (x) {\n    // intentionally empty\n  }\n}\n\nHtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;\n\nmodule.exports = HtmlfileReceiver;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/iframe\":46,\"../../utils/random\":49,\"../../utils/url\":51,\"events\":2,\"inherits\":53}],30:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar utils = _dereq_('../../utils/iframe')\n  , random = _dereq_('../../utils/random')\n  , browser = _dereq_('../../utils/browser')\n  , urlUtils = _dereq_('../../utils/url')\n  , inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  ;\n\nfunction JsonpReceiver(url) {\n  var self = this;\n  EventEmitter.call(this);\n\n  utils.polluteGlobalNamespace();\n\n  this.id = 'a' + random.string(6);\n  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));\n\n  global[utils.WPrefix][this.id] = this._callback.bind(this);\n  this._createScript(urlWithId);\n\n  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.\n  this.timeoutId = setTimeout(function() {\n    self._abort(new Error('JSONP script loaded abnormally (timeout)'));\n  }, JsonpReceiver.timeout);\n}\n\ninherits(JsonpReceiver, EventEmitter);\n\nJsonpReceiver.prototype.abort = function() {\n  if (global[utils.WPrefix][this.id]) {\n    var err = new Error('JSONP user aborted read');\n    err.code = 1000;\n    this._abort(err);\n  }\n};\n\nJsonpReceiver.timeout = 35000;\nJsonpReceiver.scriptErrorTimeout = 1000;\n\nJsonpReceiver.prototype._callback = function(data) {\n  this._cleanup();\n\n  if (this.aborting) {\n    return;\n  }\n\n  if (data) {\n    this.emit('message', data);\n  }\n  this.emit('close', null, 'network');\n  this.removeAllListeners();\n};\n\nJsonpReceiver.prototype._abort = function(err) {\n  this._cleanup();\n  this.aborting = true;\n  this.emit('close', err.code, err.message);\n  this.removeAllListeners();\n};\n\nJsonpReceiver.prototype._cleanup = function() {\n  clearTimeout(this.timeoutId);\n  if (this.script2) {\n    this.script2.parentNode.removeChild(this.script2);\n    this.script2 = null;\n  }\n  if (this.script) {\n    var script = this.script;\n    // Unfortunately, you can't really abort script loading of\n    // the script.\n    script.parentNode.removeChild(script);\n    script.onreadystatechange = script.onerror =\n        script.onload = script.onclick = null;\n    this.script = null;\n  }\n  delete global[utils.WPrefix][this.id];\n};\n\nJsonpReceiver.prototype._scriptError = function() {\n  var self = this;\n  if (this.errorTimer) {\n    return;\n  }\n\n  this.errorTimer = setTimeout(function() {\n    if (!self.loadedOkay) {\n      self._abort(new Error('JSONP script loaded abnormally (onerror)'));\n    }\n  }, JsonpReceiver.scriptErrorTimeout);\n};\n\nJsonpReceiver.prototype._createScript = function(url) {\n  var self = this;\n  var script = this.script = global.document.createElement('script');\n  var script2;  // Opera synchronous load trick.\n\n  script.id = 'a' + random.string(8);\n  script.src = url;\n  script.type = 'text/javascript';\n  script.charset = 'UTF-8';\n  script.onerror = this._scriptError.bind(this);\n  script.onload = function() {\n    self._abort(new Error('JSONP script loaded abnormally (onload)'));\n  };\n\n  // IE9 fires 'error' event after onreadystatechange or before, in random order.\n  // Use loadedOkay to determine if actually errored\n  script.onreadystatechange = function() {\n    if (/loaded|closed/.test(script.readyState)) {\n      if (script && script.htmlFor && script.onclick) {\n        self.loadedOkay = true;\n        try {\n          // In IE, actually execute the script.\n          script.onclick();\n        } catch (x) {\n          // intentionally empty\n        }\n      }\n      if (script) {\n        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));\n      }\n    }\n  };\n  // IE: event/htmlFor/onclick trick.\n  // One can't rely on proper order for onreadystatechange. In order to\n  // make sure, set a 'htmlFor' and 'event' properties, so that\n  // script code will be installed as 'onclick' handler for the\n  // script object. Later, onreadystatechange, manually execute this\n  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'\n  // set. For reference see:\n  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n  // Also, read on that about script ordering:\n  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order\n  if (typeof script.async === 'undefined' && global.document.attachEvent) {\n    // According to mozilla docs, in recent browsers script.async defaults\n    // to 'true', so we may use it to detect a good browser:\n    // https://developer.mozilla.org/en/HTML/Element/script\n    if (!browser.isOpera()) {\n      // Naively assume we're in IE\n      try {\n        script.htmlFor = script.id;\n        script.event = 'onclick';\n      } catch (x) {\n        // intentionally empty\n      }\n      script.async = true;\n    } else {\n      // Opera, second sync script hack\n      script2 = this.script2 = global.document.createElement('script');\n      script2.text = \"try{var a = document.getElementById('\" + script.id + \"'); if(a)a.onerror();}catch(x){};\";\n      script.async = script2.async = false;\n    }\n  }\n  if (typeof script.async !== 'undefined') {\n    script.async = true;\n  }\n\n  var head = global.document.getElementsByTagName('head')[0];\n  head.insertBefore(script, head.firstChild);\n  if (script2) {\n    head.insertBefore(script2, head.firstChild);\n  }\n};\n\nmodule.exports = JsonpReceiver;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/browser\":43,\"../../utils/iframe\":46,\"../../utils/random\":49,\"../../utils/url\":51,\"events\":2,\"inherits\":53}],31:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  ;\n\nfunction XhrReceiver(url, AjaxObject) {\n  EventEmitter.call(this);\n  var self = this;\n\n  this.bufferPosition = 0;\n\n  this.xo = new AjaxObject('POST', url, null);\n  this.xo.on('chunk', this._chunkHandler.bind(this));\n  this.xo.once('finish', function(status, text) {\n    self._chunkHandler(status, text);\n    self.xo = null;\n    var reason = status === 200 ? 'network' : 'permanent';\n    self.emit('close', null, reason);\n    self._cleanup();\n  });\n}\n\ninherits(XhrReceiver, EventEmitter);\n\nXhrReceiver.prototype._chunkHandler = function(status, text) {\n  if (status !== 200 || !text) {\n    return;\n  }\n\n  for (var idx = -1; ; this.bufferPosition += idx + 1) {\n    var buf = text.slice(this.bufferPosition);\n    idx = buf.indexOf('\\n');\n    if (idx === -1) {\n      break;\n    }\n    var msg = buf.slice(0, idx);\n    if (msg) {\n      this.emit('message', msg);\n    }\n  }\n};\n\nXhrReceiver.prototype._cleanup = function() {\n  this.removeAllListeners();\n};\n\nXhrReceiver.prototype.abort = function() {\n  if (this.xo) {\n    this.xo.close();\n    this.emit('close', null, 'user');\n    this.xo = null;\n  }\n  this._cleanup();\n};\n\nmodule.exports = XhrReceiver;\n\n},{\"events\":2,\"inherits\":53}],32:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar random = _dereq_('../../utils/random')\n  , urlUtils = _dereq_('../../utils/url')\n  ;\n\nvar form, area;\n\nfunction createIframe(id) {\n  try {\n    // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n    return global.document.createElement('<iframe name=\"' + id + '\">');\n  } catch (x) {\n    var iframe = global.document.createElement('iframe');\n    iframe.name = id;\n    return iframe;\n  }\n}\n\nfunction createForm() {\n  form = global.document.createElement('form');\n  form.style.display = 'none';\n  form.style.position = 'absolute';\n  form.method = 'POST';\n  form.enctype = 'application/x-www-form-urlencoded';\n  form.acceptCharset = 'UTF-8';\n\n  area = global.document.createElement('textarea');\n  area.name = 'd';\n  form.appendChild(area);\n\n  global.document.body.appendChild(form);\n}\n\nmodule.exports = function(url, payload, callback) {\n  if (!form) {\n    createForm();\n  }\n  var id = 'a' + random.string(8);\n  form.target = id;\n  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);\n\n  var iframe = createIframe(id);\n  iframe.id = id;\n  iframe.style.display = 'none';\n  form.appendChild(iframe);\n\n  try {\n    area.value = payload;\n  } catch (e) {\n    // seriously broken browsers get here\n  }\n  form.submit();\n\n  var completed = function(err) {\n    if (!iframe.onerror) {\n      return;\n    }\n    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;\n    // Opera mini doesn't like if we GC iframe\n    // immediately, thus this timeout.\n    setTimeout(function() {\n      iframe.parentNode.removeChild(iframe);\n      iframe = null;\n    }, 500);\n    area.value = '';\n    // It is not possible to detect if the iframe succeeded or\n    // failed to submit our form.\n    callback(err);\n  };\n  iframe.onerror = function() {\n    completed();\n  };\n  iframe.onload = function() {\n    completed();\n  };\n  iframe.onreadystatechange = function(e) {\n    if (iframe.readyState === 'complete') {\n      completed();\n    }\n  };\n  return function() {\n    completed(new Error('Aborted'));\n  };\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/random\":49,\"../../utils/url\":51}],33:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  , eventUtils = _dereq_('../../utils/event')\n  , browser = _dereq_('../../utils/browser')\n  , urlUtils = _dereq_('../../utils/url')\n  ;\n\n// References:\n//   http://ajaxian.com/archives/100-line-ajax-wrapper\n//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx\n\nfunction XDRObject(method, url, payload) {\n  var self = this;\n  EventEmitter.call(this);\n\n  setTimeout(function() {\n    self._start(method, url, payload);\n  }, 0);\n}\n\ninherits(XDRObject, EventEmitter);\n\nXDRObject.prototype._start = function(method, url, payload) {\n  var self = this;\n  var xdr = new global.XDomainRequest();\n  // IE caches even POSTs\n  url = urlUtils.addQuery(url, 't=' + (+new Date()));\n\n  xdr.onerror = function() {\n    self._error();\n  };\n  xdr.ontimeout = function() {\n    self._error();\n  };\n  xdr.onprogress = function() {\n    self.emit('chunk', 200, xdr.responseText);\n  };\n  xdr.onload = function() {\n    self.emit('finish', 200, xdr.responseText);\n    self._cleanup(false);\n  };\n  this.xdr = xdr;\n  this.unloadRef = eventUtils.unloadAdd(function() {\n    self._cleanup(true);\n  });\n  try {\n    // Fails with AccessDenied if port number is bogus\n    this.xdr.open(method, url);\n    if (this.timeout) {\n      this.xdr.timeout = this.timeout;\n    }\n    this.xdr.send(payload);\n  } catch (x) {\n    this._error();\n  }\n};\n\nXDRObject.prototype._error = function() {\n  this.emit('finish', 0, '');\n  this._cleanup(false);\n};\n\nXDRObject.prototype._cleanup = function(abort) {\n  if (!this.xdr) {\n    return;\n  }\n  this.removeAllListeners();\n  eventUtils.unloadDel(this.unloadRef);\n\n  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;\n  if (abort) {\n    try {\n      this.xdr.abort();\n    } catch (x) {\n      // intentionally empty\n    }\n  }\n  this.unloadRef = this.xdr = null;\n};\n\nXDRObject.prototype.close = function() {\n  this._cleanup(true);\n};\n\n// IE 8/9 if the request target uses the same scheme - #79\nXDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());\n\nmodule.exports = XDRObject;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../utils/browser\":43,\"../../utils/event\":45,\"../../utils/url\":51,\"events\":2,\"inherits\":53}],34:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , XhrDriver = _dereq_('../driver/xhr')\n  ;\n\nfunction XHRCorsObject(method, url, payload, opts) {\n  XhrDriver.call(this, method, url, payload, opts);\n}\n\ninherits(XHRCorsObject, XhrDriver);\n\nXHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;\n\nmodule.exports = XHRCorsObject;\n\n},{\"../driver/xhr\":16,\"inherits\":53}],35:[function(_dereq_,module,exports){\n'use strict';\n\nvar EventEmitter = _dereq_('events').EventEmitter\n  , inherits = _dereq_('inherits')\n  ;\n\nfunction XHRFake(/* method, url, payload, opts */) {\n  var self = this;\n  EventEmitter.call(this);\n\n  this.to = setTimeout(function() {\n    self.emit('finish', 200, '{}');\n  }, XHRFake.timeout);\n}\n\ninherits(XHRFake, EventEmitter);\n\nXHRFake.prototype.close = function() {\n  clearTimeout(this.to);\n};\n\nXHRFake.timeout = 2000;\n\nmodule.exports = XHRFake;\n\n},{\"events\":2,\"inherits\":53}],36:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , XhrDriver = _dereq_('../driver/xhr')\n  ;\n\nfunction XHRLocalObject(method, url, payload /*, opts */) {\n  XhrDriver.call(this, method, url, payload, {\n    noCredentials: true\n  });\n}\n\ninherits(XHRLocalObject, XhrDriver);\n\nXHRLocalObject.enabled = XhrDriver.enabled;\n\nmodule.exports = XHRLocalObject;\n\n},{\"../driver/xhr\":16,\"inherits\":53}],37:[function(_dereq_,module,exports){\n'use strict';\n\nvar utils = _dereq_('../utils/event')\n  , urlUtils = _dereq_('../utils/url')\n  , inherits = _dereq_('inherits')\n  , EventEmitter = _dereq_('events').EventEmitter\n  , WebsocketDriver = _dereq_('./driver/websocket')\n  ;\n\nfunction WebSocketTransport(transUrl, ignore, options) {\n  if (!WebSocketTransport.enabled()) {\n    throw new Error('Transport created when disabled');\n  }\n\n  EventEmitter.call(this);\n\n  var self = this;\n  var url = urlUtils.addPath(transUrl, '/websocket');\n  if (url.slice(0, 5) === 'https') {\n    url = 'wss' + url.slice(5);\n  } else {\n    url = 'ws' + url.slice(4);\n  }\n  this.url = url;\n\n  this.ws = new WebsocketDriver(this.url, [], options);\n  this.ws.onmessage = function(e) {\n    self.emit('message', e.data);\n  };\n  // Firefox has an interesting bug. If a websocket connection is\n  // created after onunload, it stays alive even when user\n  // navigates away from the page. In such situation let's lie -\n  // let's not open the ws connection at all. See:\n  // https://github.com/sockjs/sockjs-client/issues/28\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085\n  this.unloadRef = utils.unloadAdd(function() {\n    self.ws.close();\n  });\n  this.ws.onclose = function(e) {\n    self.emit('close', e.code, e.reason);\n    self._cleanup();\n  };\n  this.ws.onerror = function(e) {\n    self.emit('close', 1006, 'WebSocket connection broken');\n    self._cleanup();\n  };\n}\n\ninherits(WebSocketTransport, EventEmitter);\n\nWebSocketTransport.prototype.send = function(data) {\n  var msg = '[' + data + ']';\n  this.ws.send(msg);\n};\n\nWebSocketTransport.prototype.close = function() {\n  var ws = this.ws;\n  this._cleanup();\n  if (ws) {\n    ws.close();\n  }\n};\n\nWebSocketTransport.prototype._cleanup = function() {\n  var ws = this.ws;\n  if (ws) {\n    ws.onmessage = ws.onclose = ws.onerror = null;\n  }\n  utils.unloadDel(this.unloadRef);\n  this.unloadRef = this.ws = null;\n  this.removeAllListeners();\n};\n\nWebSocketTransport.enabled = function() {\n  return !!WebsocketDriver;\n};\nWebSocketTransport.transportName = 'websocket';\n\n// In theory, ws should require 1 round trip. But in chrome, this is\n// not very stable over SSL. Most likely a ws connection requires a\n// separate SSL connection, in which case 2 round trips are an\n// absolute minumum.\nWebSocketTransport.roundTrips = 2;\n\nmodule.exports = WebSocketTransport;\n\n},{\"../utils/event\":45,\"../utils/url\":51,\"./driver/websocket\":18,\"events\":2,\"inherits\":53}],38:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  , XdrStreamingTransport = _dereq_('./xdr-streaming')\n  , XhrReceiver = _dereq_('./receiver/xhr')\n  , XDRObject = _dereq_('./sender/xdr')\n  ;\n\nfunction XdrPollingTransport(transUrl) {\n  if (!XDRObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);\n}\n\ninherits(XdrPollingTransport, AjaxBasedTransport);\n\nXdrPollingTransport.enabled = XdrStreamingTransport.enabled;\nXdrPollingTransport.transportName = 'xdr-polling';\nXdrPollingTransport.roundTrips = 2; // preflight, ajax\n\nmodule.exports = XdrPollingTransport;\n\n},{\"./lib/ajax-based\":23,\"./receiver/xhr\":31,\"./sender/xdr\":33,\"./xdr-streaming\":39,\"inherits\":53}],39:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  , XhrReceiver = _dereq_('./receiver/xhr')\n  , XDRObject = _dereq_('./sender/xdr')\n  ;\n\n// According to:\n//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests\n//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\n\nfunction XdrStreamingTransport(transUrl) {\n  if (!XDRObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);\n}\n\ninherits(XdrStreamingTransport, AjaxBasedTransport);\n\nXdrStreamingTransport.enabled = function(info) {\n  if (info.cookie_needed || info.nullOrigin) {\n    return false;\n  }\n  return XDRObject.enabled && info.sameScheme;\n};\n\nXdrStreamingTransport.transportName = 'xdr-streaming';\nXdrStreamingTransport.roundTrips = 2; // preflight, ajax\n\nmodule.exports = XdrStreamingTransport;\n\n},{\"./lib/ajax-based\":23,\"./receiver/xhr\":31,\"./sender/xdr\":33,\"inherits\":53}],40:[function(_dereq_,module,exports){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  , XhrReceiver = _dereq_('./receiver/xhr')\n  , XHRCorsObject = _dereq_('./sender/xhr-cors')\n  , XHRLocalObject = _dereq_('./sender/xhr-local')\n  ;\n\nfunction XhrPollingTransport(transUrl) {\n  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);\n}\n\ninherits(XhrPollingTransport, AjaxBasedTransport);\n\nXhrPollingTransport.enabled = function(info) {\n  if (info.nullOrigin) {\n    return false;\n  }\n\n  if (XHRLocalObject.enabled && info.sameOrigin) {\n    return true;\n  }\n  return XHRCorsObject.enabled;\n};\n\nXhrPollingTransport.transportName = 'xhr-polling';\nXhrPollingTransport.roundTrips = 2; // preflight, ajax\n\nmodule.exports = XhrPollingTransport;\n\n},{\"./lib/ajax-based\":23,\"./receiver/xhr\":31,\"./sender/xhr-cors\":34,\"./sender/xhr-local\":36,\"inherits\":53}],41:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar inherits = _dereq_('inherits')\n  , AjaxBasedTransport = _dereq_('./lib/ajax-based')\n  , XhrReceiver = _dereq_('./receiver/xhr')\n  , XHRCorsObject = _dereq_('./sender/xhr-cors')\n  , XHRLocalObject = _dereq_('./sender/xhr-local')\n  , browser = _dereq_('../utils/browser')\n  ;\n\nfunction XhrStreamingTransport(transUrl) {\n  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {\n    throw new Error('Transport created when disabled');\n  }\n  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);\n}\n\ninherits(XhrStreamingTransport, AjaxBasedTransport);\n\nXhrStreamingTransport.enabled = function(info) {\n  if (info.nullOrigin) {\n    return false;\n  }\n  // Opera doesn't support xhr-streaming #60\n  // But it might be able to #92\n  if (browser.isOpera()) {\n    return false;\n  }\n\n  return XHRCorsObject.enabled;\n};\n\nXhrStreamingTransport.transportName = 'xhr-streaming';\nXhrStreamingTransport.roundTrips = 2; // preflight, ajax\n\n// Safari gets confused when a streaming ajax request is started\n// before onload. This causes the load indicator to spin indefinetely.\n// Only require body when used in a browser\nXhrStreamingTransport.needBody = !!global.document;\n\nmodule.exports = XhrStreamingTransport;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../utils/browser\":43,\"./lib/ajax-based\":23,\"./receiver/xhr\":31,\"./sender/xhr-cors\":34,\"./sender/xhr-local\":36,\"inherits\":53}],42:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nif (global.crypto && global.crypto.getRandomValues) {\n  module.exports.randomBytes = function(length) {\n    var bytes = new Uint8Array(length);\n    global.crypto.getRandomValues(bytes);\n    return bytes;\n  };\n} else {\n  module.exports.randomBytes = function(length) {\n    var bytes = new Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n    return bytes;\n  };\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],43:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = {\n  isOpera: function() {\n    return global.navigator &&\n      /opera/i.test(global.navigator.userAgent);\n  }\n\n, isKonqueror: function() {\n    return global.navigator &&\n      /konqueror/i.test(global.navigator.userAgent);\n  }\n\n  // #187 wrap document.domain in try/catch because of WP8 from file:///\n, hasDomain: function () {\n    // non-browser client always has a domain\n    if (!global.document) {\n      return true;\n    }\n\n    try {\n      return !!global.document.domain;\n    } catch (e) {\n      return false;\n    }\n  }\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],44:[function(_dereq_,module,exports){\n'use strict';\n\nvar JSON3 = _dereq_('json3');\n\n// Some extra characters that Chrome gets wrong, and substitutes with\n// something else on the wire.\n// eslint-disable-next-line no-control-regex\nvar extraEscapable = /[\\x00-\\x1f\\ud800-\\udfff\\ufffe\\uffff\\u0300-\\u0333\\u033d-\\u0346\\u034a-\\u034c\\u0350-\\u0352\\u0357-\\u0358\\u035c-\\u0362\\u0374\\u037e\\u0387\\u0591-\\u05af\\u05c4\\u0610-\\u0617\\u0653-\\u0654\\u0657-\\u065b\\u065d-\\u065e\\u06df-\\u06e2\\u06eb-\\u06ec\\u0730\\u0732-\\u0733\\u0735-\\u0736\\u073a\\u073d\\u073f-\\u0741\\u0743\\u0745\\u0747\\u07eb-\\u07f1\\u0951\\u0958-\\u095f\\u09dc-\\u09dd\\u09df\\u0a33\\u0a36\\u0a59-\\u0a5b\\u0a5e\\u0b5c-\\u0b5d\\u0e38-\\u0e39\\u0f43\\u0f4d\\u0f52\\u0f57\\u0f5c\\u0f69\\u0f72-\\u0f76\\u0f78\\u0f80-\\u0f83\\u0f93\\u0f9d\\u0fa2\\u0fa7\\u0fac\\u0fb9\\u1939-\\u193a\\u1a17\\u1b6b\\u1cda-\\u1cdb\\u1dc0-\\u1dcf\\u1dfc\\u1dfe\\u1f71\\u1f73\\u1f75\\u1f77\\u1f79\\u1f7b\\u1f7d\\u1fbb\\u1fbe\\u1fc9\\u1fcb\\u1fd3\\u1fdb\\u1fe3\\u1feb\\u1fee-\\u1fef\\u1ff9\\u1ffb\\u1ffd\\u2000-\\u2001\\u20d0-\\u20d1\\u20d4-\\u20d7\\u20e7-\\u20e9\\u2126\\u212a-\\u212b\\u2329-\\u232a\\u2adc\\u302b-\\u302c\\uaab2-\\uaab3\\uf900-\\ufa0d\\ufa10\\ufa12\\ufa15-\\ufa1e\\ufa20\\ufa22\\ufa25-\\ufa26\\ufa2a-\\ufa2d\\ufa30-\\ufa6d\\ufa70-\\ufad9\\ufb1d\\ufb1f\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufb4e\\ufff0-\\uffff]/g\n  , extraLookup;\n\n// This may be quite slow, so let's delay until user actually uses bad\n// characters.\nvar unrollLookup = function(escapable) {\n  var i;\n  var unrolled = {};\n  var c = [];\n  for (i = 0; i < 65536; i++) {\n    c.push( String.fromCharCode(i) );\n  }\n  escapable.lastIndex = 0;\n  c.join('').replace(escapable, function(a) {\n    unrolled[ a ] = '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    return '';\n  });\n  escapable.lastIndex = 0;\n  return unrolled;\n};\n\n// Quote string, also taking care of unicode characters that browsers\n// often break. Especially, take care of unicode surrogates:\n// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates\nmodule.exports = {\n  quote: function(string) {\n    var quoted = JSON3.stringify(string);\n\n    // In most cases this should be very fast and good enough.\n    extraEscapable.lastIndex = 0;\n    if (!extraEscapable.test(quoted)) {\n      return quoted;\n    }\n\n    if (!extraLookup) {\n      extraLookup = unrollLookup(extraEscapable);\n    }\n\n    return quoted.replace(extraEscapable, function(a) {\n      return extraLookup[a];\n    });\n  }\n};\n\n},{\"json3\":54}],45:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar random = _dereq_('./random');\n\nvar onUnload = {}\n  , afterUnload = false\n    // detect google chrome packaged apps because they don't allow the 'unload' event\n  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime\n  ;\n\nmodule.exports = {\n  attachEvent: function(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.addEventListener(event, listener, false);\n    } else if (global.document && global.attachEvent) {\n      // IE quirks.\n      // According to: http://stevesouders.com/misc/test-postmessage.php\n      // the message gets delivered only to 'document', not 'window'.\n      global.document.attachEvent('on' + event, listener);\n      // I get 'window' for ie8.\n      global.attachEvent('on' + event, listener);\n    }\n  }\n\n, detachEvent: function(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.removeEventListener(event, listener, false);\n    } else if (global.document && global.detachEvent) {\n      global.document.detachEvent('on' + event, listener);\n      global.detachEvent('on' + event, listener);\n    }\n  }\n\n, unloadAdd: function(listener) {\n    if (isChromePackagedApp) {\n      return null;\n    }\n\n    var ref = random.string(8);\n    onUnload[ref] = listener;\n    if (afterUnload) {\n      setTimeout(this.triggerUnloadCallbacks, 0);\n    }\n    return ref;\n  }\n\n, unloadDel: function(ref) {\n    if (ref in onUnload) {\n      delete onUnload[ref];\n    }\n  }\n\n, triggerUnloadCallbacks: function() {\n    for (var ref in onUnload) {\n      onUnload[ref]();\n      delete onUnload[ref];\n    }\n  }\n};\n\nvar unloadTriggered = function() {\n  if (afterUnload) {\n    return;\n  }\n  afterUnload = true;\n  module.exports.triggerUnloadCallbacks();\n};\n\n// 'unload' alone is not reliable in opera within an iframe, but we\n// can't use `beforeunload` as IE fires it on javascript: links.\nif (!isChromePackagedApp) {\n  module.exports.attachEvent('unload', unloadTriggered);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./random\":49}],46:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar eventUtils = _dereq_('./event')\n  , JSON3 = _dereq_('json3')\n  , browser = _dereq_('./browser')\n  ;\n\nmodule.exports = {\n  WPrefix: '_jp'\n, currentWindowId: null\n\n, polluteGlobalNamespace: function() {\n    if (!(module.exports.WPrefix in global)) {\n      global[module.exports.WPrefix] = {};\n    }\n  }\n\n, postMessage: function(type, data) {\n    if (global.parent !== global) {\n      global.parent.postMessage(JSON3.stringify({\n        windowId: module.exports.currentWindowId\n      , type: type\n      , data: data || ''\n      }), '*');\n    } else {\n    }\n  }\n\n, createIframe: function(iframeUrl, errorCallback) {\n    var iframe = global.document.createElement('iframe');\n    var tref, unloadRef;\n    var unattach = function() {\n      clearTimeout(tref);\n      // Explorer had problems with that.\n      try {\n        iframe.onload = null;\n      } catch (x) {\n        // intentionally empty\n      }\n      iframe.onerror = null;\n    };\n    var cleanup = function() {\n      if (iframe) {\n        unattach();\n        // This timeout makes chrome fire onbeforeunload event\n        // within iframe. Without the timeout it goes straight to\n        // onunload.\n        setTimeout(function() {\n          if (iframe) {\n            iframe.parentNode.removeChild(iframe);\n          }\n          iframe = null;\n        }, 0);\n        eventUtils.unloadDel(unloadRef);\n      }\n    };\n    var onerror = function(err) {\n      if (iframe) {\n        cleanup();\n        errorCallback(err);\n      }\n    };\n    var post = function(msg, origin) {\n      try {\n        // When the iframe is not loaded, IE raises an exception\n        // on 'contentWindow'.\n        setTimeout(function() {\n          if (iframe && iframe.contentWindow) {\n            iframe.contentWindow.postMessage(msg, origin);\n          }\n        }, 0);\n      } catch (x) {\n        // intentionally empty\n      }\n    };\n\n    iframe.src = iframeUrl;\n    iframe.style.display = 'none';\n    iframe.style.position = 'absolute';\n    iframe.onerror = function() {\n      onerror('onerror');\n    };\n    iframe.onload = function() {\n      // `onload` is triggered before scripts on the iframe are\n      // executed. Give it few seconds to actually load stuff.\n      clearTimeout(tref);\n      tref = setTimeout(function() {\n        onerror('onload timeout');\n      }, 2000);\n    };\n    global.document.body.appendChild(iframe);\n    tref = setTimeout(function() {\n      onerror('timeout');\n    }, 15000);\n    unloadRef = eventUtils.unloadAdd(cleanup);\n    return {\n      post: post\n    , cleanup: cleanup\n    , loaded: unattach\n    };\n  }\n\n/* eslint no-undef: \"off\", new-cap: \"off\" */\n, createHtmlfile: function(iframeUrl, errorCallback) {\n    var axo = ['Active'].concat('Object').join('X');\n    var doc = new global[axo]('htmlfile');\n    var tref, unloadRef;\n    var iframe;\n    var unattach = function() {\n      clearTimeout(tref);\n      iframe.onerror = null;\n    };\n    var cleanup = function() {\n      if (doc) {\n        unattach();\n        eventUtils.unloadDel(unloadRef);\n        iframe.parentNode.removeChild(iframe);\n        iframe = doc = null;\n        CollectGarbage();\n      }\n    };\n    var onerror = function(r) {\n      if (doc) {\n        cleanup();\n        errorCallback(r);\n      }\n    };\n    var post = function(msg, origin) {\n      try {\n        // When the iframe is not loaded, IE raises an exception\n        // on 'contentWindow'.\n        setTimeout(function() {\n          if (iframe && iframe.contentWindow) {\n              iframe.contentWindow.postMessage(msg, origin);\n          }\n        }, 0);\n      } catch (x) {\n        // intentionally empty\n      }\n    };\n\n    doc.open();\n    doc.write('<html><s' + 'cript>' +\n              'document.domain=\"' + global.document.domain + '\";' +\n              '</s' + 'cript></html>');\n    doc.close();\n    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];\n    var c = doc.createElement('div');\n    doc.body.appendChild(c);\n    iframe = doc.createElement('iframe');\n    c.appendChild(iframe);\n    iframe.src = iframeUrl;\n    iframe.onerror = function() {\n      onerror('onerror');\n    };\n    tref = setTimeout(function() {\n      onerror('timeout');\n    }, 15000);\n    unloadRef = eventUtils.unloadAdd(cleanup);\n    return {\n      post: post\n    , cleanup: cleanup\n    , loaded: unattach\n    };\n  }\n};\n\nmodule.exports.iframeEnabled = false;\nif (global.document) {\n  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with\n  // huge delay, or not at all.\n  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||\n    typeof global.postMessage === 'object') && (!browser.isKonqueror());\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./browser\":43,\"./event\":45,\"json3\":54}],47:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar logObject = {};\n['log', 'debug', 'warn'].forEach(function (level) {\n  var levelExists;\n\n  try {\n    levelExists = global.console && global.console[level] && global.console[level].apply;\n  } catch(e) {\n    // do nothing\n  }\n\n  logObject[level] = levelExists ? function () {\n    return global.console[level].apply(global.console, arguments);\n  } : (level === 'log' ? function () {} : logObject.log);\n});\n\nmodule.exports = logObject;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],48:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = {\n  isObject: function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n, extend: function(obj) {\n    if (!this.isObject(obj)) {\n      return obj;\n    }\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n      source = arguments[i];\n      for (prop in source) {\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\n          obj[prop] = source[prop];\n        }\n      }\n    }\n    return obj;\n  }\n};\n\n},{}],49:[function(_dereq_,module,exports){\n'use strict';\n\n/* global crypto:true */\nvar crypto = _dereq_('crypto');\n\n// This string has length 32, a power of 2, so the modulus doesn't introduce a\n// bias.\nvar _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';\nmodule.exports = {\n  string: function(length) {\n    var max = _randomStringChars.length;\n    var bytes = crypto.randomBytes(length);\n    var ret = [];\n    for (var i = 0; i < length; i++) {\n      ret.push(_randomStringChars.substr(bytes[i] % max, 1));\n    }\n    return ret.join('');\n  }\n\n, number: function(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n, numberString: function(max) {\n    var t = ('' + (max - 1)).length;\n    var p = new Array(t + 1).join('0');\n    return (p + this.number(max)).slice(-t);\n  }\n};\n\n},{\"crypto\":42}],50:[function(_dereq_,module,exports){\n'use strict';\n\nmodule.exports = function(availableTransports) {\n  return {\n    filterToEnabled: function(transportsWhitelist, info) {\n      var transports = {\n        main: []\n      , facade: []\n      };\n      if (!transportsWhitelist) {\n        transportsWhitelist = [];\n      } else if (typeof transportsWhitelist === 'string') {\n        transportsWhitelist = [transportsWhitelist];\n      }\n\n      availableTransports.forEach(function(trans) {\n        if (!trans) {\n          return;\n        }\n\n        if (trans.transportName === 'websocket' && info.websocket === false) {\n          return;\n        }\n\n        if (transportsWhitelist.length &&\n            transportsWhitelist.indexOf(trans.transportName) === -1) {\n          return;\n        }\n\n        if (trans.enabled(info)) {\n          transports.main.push(trans);\n          if (trans.facadeTransport) {\n            transports.facade.push(trans.facadeTransport);\n          }\n        } else {\n        }\n      });\n      return transports;\n    }\n  };\n};\n\n},{}],51:[function(_dereq_,module,exports){\n'use strict';\n\nvar URL = _dereq_('url-parse');\n\nmodule.exports = {\n  getOrigin: function(url) {\n    if (!url) {\n      return null;\n    }\n\n    var p = new URL(url);\n    if (p.protocol === 'file:') {\n      return null;\n    }\n\n    var port = p.port;\n    if (!port) {\n      port = (p.protocol === 'https:') ? '443' : '80';\n    }\n\n    return p.protocol + '//' + p.hostname + ':' + port;\n  }\n\n, isOriginEqual: function(a, b) {\n    var res = this.getOrigin(a) === this.getOrigin(b);\n    return res;\n  }\n\n, isSchemeEqual: function(a, b) {\n    return (a.split(':')[0] === b.split(':')[0]);\n  }\n\n, addPath: function (url, path) {\n    var qs = url.split('?');\n    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');\n  }\n\n, addQuery: function (url, q) {\n    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));\n  }\n};\n\n},{\"url-parse\":57}],52:[function(_dereq_,module,exports){\nmodule.exports = '1.1.2';\n\n},{}],53:[function(_dereq_,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],54:[function(_dereq_,module,exports){\n(function (global){\n/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\n;(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd;\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal[\"global\"] === freeGlobal || freeGlobal[\"window\"] === freeGlobal || freeGlobal[\"self\"] === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root[\"Object\"]());\n    exports || (exports = root[\"Object\"]());\n\n    // Native constructor aliases.\n    var Number = context[\"Number\"] || root[\"Number\"],\n        String = context[\"String\"] || root[\"String\"],\n        Object = context[\"Object\"] || root[\"Object\"],\n        Date = context[\"Date\"] || root[\"Date\"],\n        SyntaxError = context[\"SyntaxError\"] || root[\"SyntaxError\"],\n        TypeError = context[\"TypeError\"] || root[\"TypeError\"],\n        Math = context[\"Math\"] || root[\"Math\"],\n        nativeJSON = context[\"JSON\"] || root[\"JSON\"];\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty, forEach, undef;\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    try {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n        // Safari < 2.0.2 stores the internal millisecond time value correctly,\n        // but clips the values returned by the date methods to the range of\n        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    } catch (exception) {}\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] !== undef) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"json-parse\");\n      } else {\n        var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \"function\" && isExtended;\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            try {\n              stringifySupported =\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                // primitives as object literals.\n                stringify(0) === \"0\" &&\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                // literals.\n                stringify(new Number()) === \"0\" &&\n                stringify(new String()) == '\"\"' &&\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                // does not define a canonical JSON representation (this applies to\n                // objects with `toJSON` properties as well, *unless* they are nested\n                // within an object or array).\n                stringify(getClass) === undef &&\n                // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                // FF 3.1b3 pass this test.\n                stringify(undef) === undef &&\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                // respectively, if the value is omitted entirely.\n                stringify() === undef &&\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\n                // string, array, object, Boolean, or `null` literal. This applies to\n                // objects with custom `toJSON` methods as well, unless they are nested\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                // methods entirely.\n                stringify(value) === \"1\" &&\n                stringify([value]) == \"[1]\" &&\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                // `\"[null]\"`.\n                stringify([undef]) == \"[null]\" &&\n                // YUI 3.0.0b1 fails to serialize `null` literals.\n                stringify(null) == \"null\" &&\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\n                // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                // elides non-JSON values from objects and arrays, unless they\n                // define custom `toJSON` methods.\n                stringify([undef, getClass, null]) == \"[null,null,null]\" &&\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                stringify(null, value) === \"1\" &&\n                stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" &&\n                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n                // serialize extended years.\n                stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n                // The milliseconds are optional in ES 5, but required in 5.1.\n                stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n                // four-digit years instead of six-digit years. Credits: @Yaffle.\n                stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n                // values less than 1000. Credits: @Yaffle.\n                stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n            } catch (exception) {\n              stringifySupported = false;\n            }\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse;\n          if (typeof parse == \"function\") {\n            try {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  try {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  } catch (exception) {}\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    } catch (exception) {}\n                  }\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    } catch (exception) {}\n                  }\n                }\n              }\n            } catch (exception) {\n              parseSupported = false;\n            }\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Define additional utility methods if the `Date` methods are buggy.\n      if (!isExtended) {\n        var floor = Math.floor;\n        // A mapping between the months of the year and the number of days between\n        // January 1st and the first of the respective month.\n        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n        // Internal: Calculates the number of days between the Unix epoch and the\n        // first day of the given month.\n        var getDay = function (year, month) {\n          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n        };\n      }\n\n      // Internal: Determines if a property is a direct property of the given\n      // object. Delegates to the native `Object#hasOwnProperty` method.\n      if (!(isProperty = objectProto.hasOwnProperty)) {\n        isProperty = function (property) {\n          var members = {}, constructor;\n          if ((members.__proto__ = null, members.__proto__ = {\n            // The *proto* property cannot be set multiple times in recent\n            // versions of Firefox and SeaMonkey.\n            \"toString\": 1\n          }, members).toString != getClass) {\n            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n            // supports the mutable *proto* property.\n            isProperty = function (property) {\n              // Capture and break the object's prototype chain (see section 8.6.2\n              // of the ES 5.1 spec). The parenthesized expression prevents an\n              // unsafe transformation by the Closure Compiler.\n              var original = this.__proto__, result = property in (this.__proto__ = null, this);\n              // Restore the original prototype chain.\n              this.__proto__ = original;\n              return result;\n            };\n          } else {\n            // Capture a reference to the top-level `Object` constructor.\n            constructor = members.constructor;\n            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n            // other environments.\n            isProperty = function (property) {\n              var parent = (this.constructor || constructor).prototype;\n              return property in this && !(property in parent && this[property] === parent[property]);\n            };\n          }\n          members = null;\n          return isProperty.call(this, property);\n        };\n      }\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      forEach = function (object, callback) {\n        var size = 0, Properties, members, property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        members = new Properties();\n        for (property in members) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(members, property)) {\n            size++;\n          }\n        }\n        Properties = members = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\n          };\n        } else if (size == 2) {\n          // Safari <= 2.0.4 enumerates shadowed properties twice.\n          forEach = function (object, callback) {\n            // Create a set of iterated properties.\n            var members = {}, isFunction = getClass.call(object) == functionClass, property;\n            for (property in object) {\n              // Store each property name to prevent double enumeration. The\n              // `prototype` property of functions is not enumerated due to cross-\n              // environment inconsistencies.\n              if (!(isFunction && property == \"prototype\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n              callback(property);\n            }\n          };\n        }\n        return forEach(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Double-quotes a string `value`, replacing all ASCII control\n        // characters (characters with code unit values between 0 and 31) with\n        // their escaped equivalents. This is an implementation of the\n        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n        var unicodePrefix = \"\\\\u00\";\n        var quote = function (value) {\n          var result = '\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\n          var symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\n          for (; index < length; index++) {\n            var charCode = value.charCodeAt(index);\n            // If the character is a control character, append its Unicode or\n            // shorthand escape sequence; otherwise, append the character as-is.\n            switch (charCode) {\n              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\n                result += Escapes[charCode];\n                break;\n              default:\n                if (charCode < 32) {\n                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                  break;\n                }\n                result += useCharIndex ? symbols[index] : value.charAt(index);\n            }\n          }\n          return result + '\"';\n        };\n\n        // Internal: Recursively serializes an object. Implements the\n        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n          try {\n            // Necessary for host object support.\n            value = object[property];\n          } catch (exception) {}\n          if (typeof value == \"object\" && value) {\n            className = getClass.call(value);\n            if (className == dateClass && !isProperty.call(value, \"toJSON\")) {\n              if (value > -1 / 0 && value < 1 / 0) {\n                // Dates are serialized according to the `Date#toJSON` method\n                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n                // for the ISO 8601 date time string format.\n                if (getDay) {\n                  // Manually compute the year, month, date, hours, minutes,\n                  // seconds, and milliseconds if the `getUTC*` methods are\n                  // buggy. Adapted from @Yaffle's `date-shim` project.\n                  date = floor(value / 864e5);\n                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n                  date = 1 + date - getDay(year, month);\n                  // The `time` value specifies the time within the day (see ES\n                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                  // to compute `A modulo B`, as the `%` operator does not\n                  // correspond to the `modulo` operation for negative numbers.\n                  time = (value % 864e5 + 864e5) % 864e5;\n                  // The hours, minutes, seconds, and milliseconds are obtained by\n                  // decomposing the time within the day. See section 15.9.1.10.\n                  hours = floor(time / 36e5) % 24;\n                  minutes = floor(time / 6e4) % 60;\n                  seconds = floor(time / 1e3) % 60;\n                  milliseconds = time % 1e3;\n                } else {\n                  year = value.getUTCFullYear();\n                  month = value.getUTCMonth();\n                  date = value.getUTCDate();\n                  hours = value.getUTCHours();\n                  minutes = value.getUTCMinutes();\n                  seconds = value.getUTCSeconds();\n                  milliseconds = value.getUTCMilliseconds();\n                }\n                // Serialize extended years correctly.\n                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n                  \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                  // Months, dates, hours, minutes, and seconds should have two\n                  // digits; milliseconds should have three.\n                  \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                  // Milliseconds are optional in ES 5.0, but required in 5.1.\n                  \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              } else {\n                value = null;\n              }\n            } else if (typeof value.toJSON == \"function\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \"toJSON\"))) {\n              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n              // ignores all `toJSON` methods on these objects unless they are\n              // defined directly on an instance.\n              value = value.toJSON(property);\n            }\n          }\n          if (callback) {\n            // If a replacement function was provided, call it to obtain the value\n            // for serialization.\n            value = callback.call(object, property, value);\n          }\n          if (value === null) {\n            return \"null\";\n          }\n          className = getClass.call(value);\n          if (className == booleanClass) {\n            // Booleans are represented literally.\n            return \"\" + value;\n          } else if (className == numberClass) {\n            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n            // `\"null\"`.\n            return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n          } else if (className == stringClass) {\n            // Strings are double-quoted and escaped.\n            return quote(\"\" + value);\n          }\n          // Recursively serialize objects and arrays.\n          if (typeof value == \"object\") {\n            // Check for cyclic structures. This is a linear search; performance\n            // is inversely proportional to the number of unique nested objects.\n            for (length = stack.length; length--;) {\n              if (stack[length] === value) {\n                // Cyclic structures cannot be serialized by `JSON.stringify`.\n                throw TypeError();\n              }\n            }\n            // Add the object to the stack of traversed objects.\n            stack.push(value);\n            results = [];\n            // Save the current indentation level and indent one additional level.\n            prefix = indentation;\n            indentation += whitespace;\n            if (className == arrayClass) {\n              // Recursively serialize array elements.\n              for (index = 0, length = value.length; index < length; index++) {\n                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                results.push(element === undef ? \"null\" : element);\n              }\n              result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n            } else {\n              // Recursively serialize object members. Members are selected from\n              // either a user-specified list of property names, or the object\n              // itself.\n              forEach(properties || value, function (property) {\n                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                if (element !== undef) {\n                  // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                  // is not the empty string, let `member` {quote(property) + \":\"}\n                  // be the concatenation of `member` and the `space` character.\"\n                  // The \"`space` character\" refers to the literal space\n                  // character, not the `space` {width} argument provided to\n                  // `JSON.stringify`.\n                  results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                }\n              });\n              result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n            }\n            // Remove the object from the traversed object stack.\n            stack.pop();\n            return result;\n          }\n        };\n\n        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n        exports.stringify = function (source, filter, width) {\n          var whitespace, callback, properties, className;\n          if (objectTypes[typeof filter] && filter) {\n            if ((className = getClass.call(filter)) == functionClass) {\n              callback = filter;\n            } else if (className == arrayClass) {\n              // Convert the property names array into a makeshift set.\n              properties = {};\n              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\n            }\n          }\n          if (width) {\n            if ((className = getClass.call(width)) == numberClass) {\n              // Convert the `width` to an integer and create a string containing\n              // `width` number of space characters.\n              if ((width -= width % 1) > 0) {\n                for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \");\n              }\n            } else if (className == stringClass) {\n              whitespace = width.length <= 10 ? width : width.slice(0, 10);\n            }\n          }\n          // Opera <= 7.54u2 discards the values associated with empty string keys\n          // (`\"\"`) only if they are used directly within an object member list\n          // (e.g., `!(\"\" in { \"\": 1})`).\n          return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n        };\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9: case 10: case 13: case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123: case 125: case 91: case 93: case 58: case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                if (source.slice(Index, Index + 4) == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (source.slice(Index, Index + 5) == \"false\") {\n                  Index += 5;\n                  return false;\n                } else if (source.slice(Index, Index + 4) == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undef) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property], length;\n          if (typeof value == \"object\" && value) {\n            // `forEach` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(value, length, callback);\n              }\n            } else {\n              forEach(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports[\"runInContext\"] = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root[\"JSON3\"],\n        isRestored = false;\n\n    var JSON3 = runInContext(root, (root[\"JSON3\"] = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root[\"JSON3\"] = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    }));\n\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}).call(this);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],55:[function(_dereq_,module,exports){\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  //\n  // Little nifty parsing hack, leverage the fact that RegExp.exec increments\n  // the lastIndex property so we can continue executing this loop until we've\n  // parsed all results.\n  //\n  for (;\n    part = parser.exec(query);\n    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])\n  );\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n\n},{}],56:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\n},{}],57:[function(_dereq_,module,exports){\n'use strict';\n\nvar required = _dereq_('requires-port')\n  , lolcation = _dereq_('./lolcation')\n  , qs = _dereq_('querystringify')\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if (index = parse.exec(address)) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nURL.prototype.set = function set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;\n\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n};\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nURL.prototype.toString = function toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n};\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\n\nmodule.exports = URL;\n\n},{\"./lolcation\":58,\"querystringify\":55,\"requires-port\":56}],58:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 }\n  , URL;\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nmodule.exports = function lolcation(loc) {\n  loc = loc || global.location || {};\n  URL = URL || _dereq_('./');\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./\":57}],59:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar transportList = _dereq_('./transport-list');\n\nmodule.exports = _dereq_('./main')(transportList);\n\n// TODO can't get rid of this until all servers do\nif ('_sockjs_onload' in global) {\n  setTimeout(global._sockjs_onload, 1);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./main\":13,\"./transport-list\":15}]},{},[59])(59)\n});","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/sockjs/server.js":"'use strict';\n\nconst sockjs = require('sockjs');\nconst url = require('url');\n\nconst PrimusError = require('../../errors').PrimusError;\n\n/**\n * Minimum viable Sockjs server for Node.js that works through the primus\n * interface.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  let fayeOptions = { maxLength: this.primus.options.maxLength };\n  let prefix = this.primus.pathname;\n\n  if (this.primus.options.compression) {\n    try {\n      fayeOptions.extensions = [ require('permessage-deflate') ];\n    } catch (e) {\n      [\n        '',\n        'Missing required npm dependency for sockjs',\n        'To use the permessage-deflate extension with the sockjs transformer, ',\n        'you have to install an additional dependency.',\n        'Please run the following command and try again:',\n        '',\n        '  npm install --save permessage-deflate',\n        ''\n      ].forEach((line) => console.error(`Primus: ${line}`));\n\n      throw new PrimusError(\n        'Missing dependencies for transformer: \"sockjs\"',\n        this.primus\n      );\n    }\n  }\n\n  if (prefix.charAt(prefix.length - 1) !== '/') prefix += '(?:[^/]+)?';\n\n  this.service = sockjs.createServer();\n\n  //\n  // We've received a new connection, create a new Spark. The Spark will\n  // automatically announce it self as a new connection once it's created (after\n  // the next tick).\n  //\n  this.service.on('connection', (socket) => {\n    const headers = socket.headers.via;\n\n    headers.via = headers._via;\n    socket.headers.via = null;\n\n    const spark = new this.Spark(\n        headers                      // HTTP request headers.\n      , socket                       // IP address location.\n      , url.parse(socket.url).query  // Optional query string.\n      , socket.id                    // Unique connection id.\n    );\n\n    spark.on('outgoing::end', () => socket && socket.close());\n    spark.on('outgoing::data', (data) => socket.write(data));\n\n    socket.on('error', spark.emits('incoming::error'));\n    socket.on('data', spark.emits('incoming::data'));\n    socket.on('close', spark.emits('incoming::end', (next) => {\n      socket.removeAllListeners();\n      socket = null;\n      next();\n    }));\n  });\n\n  //\n  // Listen to requests.\n  //\n  const handle = this.service.listener(Object.assign({\n    faye_server_options: fayeOptions\n  }, this.primus.options.transport, {\n    log: this.logger.plain,\n    prefix: prefix\n  })).getHandler();\n\n  //\n  // Here be demons. SockJS has this really horrible \"security\" feature where it\n  // limits the HTTP headers that you're allowed to see and use in your\n  // applications. I whole heartly disagree with this decision so we're hacking\n  // around this by storing the full header in an accepted header key and re-use\n  // that when we construct a Primus Spark.\n  //\n  this.on('upgrade', (req, socket, head) => {\n    req.headers._via = req.headers.via;\n    req.headers.via = req.headers;\n\n    handle.call(this, req, socket, head);\n  }).on('request', (req, res) => {\n    req.headers._via = req.headers.via;\n    req.headers.via = req.headers;\n\n    handle.call(this, req, res);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/uws/server.js":"'use strict';\n\nconst http = require('http');\nconst url = require('url');\nconst uws = require('uws');\n\nconst native = uws.native;\n\n//\n// uws v0.12.0+ needs a set \"no operation\" callback.\n//\nif (native.setNoop) native.setNoop(() => {});\n\n/**\n * Server of µWebSockets transformer.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  const options = this.primus.options;\n\n  //\n  // The `maxPayload` option is ignored by `uws` since version 0.10.0.\n  // The value has been hardcoded to 16 MiB in version 0.10.9 so using\n  // `options.transport.maxPayload` or `options.maxLength` as second\n  // argument is useless here.\n  //\n  const group = native.server.group.create(\n    options.compression || options.transport.perMessageDeflate ? 1 : 0\n  );\n\n  let upgradeReq = null;\n\n  native.server.group.onConnection(group, (socket) => {\n    const spark = new this.Spark(\n      upgradeReq.headers,               // HTTP request headers.\n      upgradeReq,                       // IP address location.\n      url.parse(upgradeReq.url).query,  // Optional query string.\n      null,                             // We don't have an unique id.\n      upgradeReq                        // Reference to the HTTP req.\n    );\n\n    native.setUserData(socket, spark);\n\n    spark.ultron.on('outgoing::end', () => native.server.close(socket));\n    spark.on('outgoing::data', (data) => {\n      const opcode = Buffer.isBuffer(data)\n        ? uws.OPCODE_BINARY\n        : uws.OPCODE_TEXT;\n\n      native.server.send(socket, data, opcode);\n    });\n  });\n\n  native.server.group.onDisconnection(group, (socket, code, msg, spark) => {\n    native.clearUserData(socket);\n    spark.ultron.remove('outgoing::end');\n    spark.emit('incoming::end');\n  });\n\n  native.server.group.onMessage(group, (msg, spark) => {\n    //\n    // Binary data is passed zero-copy as an `ArrayBuffer` so we first have to\n    // convert it to a `Buffer` and then copy it to a new `Buffer`.\n    //\n    if ('string' !== typeof msg) msg = Buffer.from(Buffer.from(msg));\n\n    spark.emit('incoming::data', msg);\n  });\n\n  native.server.group.onPing(group, (msg, spark) => spark.emit('incoming::pong'));\n\n  //\n  // Listen to upgrade requests.\n  //\n  this.on('upgrade', (req, soc) => {\n    const secKey = req.headers['sec-websocket-key'];\n\n    if (soc.readable && soc.writable && secKey && secKey.length === 24) {\n      soc.setNoDelay(options.transport.noDelay);\n\n      let socketHandle = soc._handle;\n      let sslState = null;\n\n      if (soc.ssl) {\n        socketHandle = soc._parent._handle;\n        sslState = soc.ssl._external;\n      }\n\n      const ticket = native.transfer(\n        socketHandle.fd === -1 ? socketHandle : socketHandle.fd,\n        sslState\n      );\n\n      soc.on('close', () => {\n        upgradeReq = req;\n        native.upgrade(\n          group,\n          ticket,\n          secKey,\n          req.headers['sec-websocket-extensions']\n        );\n\n        //\n        // Delete references to destroyed socket.\n        //\n        req.client = req.connection = req.socket = null;\n        upgradeReq = null;\n      });\n    }\n\n    soc.destroy();\n  });\n\n  //\n  // Listen to non-upgrade requests.\n  //\n  this.on('request', (req, res) => {\n    res.writeHead(426, { 'content-type': 'text/plain' });\n    res.end(http.STATUS_CODES[426]);\n  });\n\n  this.once('close', () => native.server.group.close(group));\n};\n","/home/travis/build/npmtest/node-npmtest-primus/node_modules/primus/transformers/websockets/server.js":"'use strict';\n\nconst http = require('http');\nconst url = require('url');\nconst ws = require('ws');\n\n/**\n * Minimum viable WebSocket server for Node.js that works through the Primus\n * interface.\n *\n * @runat server\n * @api private\n */\nmodule.exports = function server() {\n  this.service = new ws.Server(Object.assign({\n    perMessageDeflate: !!this.primus.options.compression,\n    maxPayload: this.primus.options.maxLength\n  }, this.primus.options.transport, {\n    clientTracking: false,\n    noServer: true\n  }));\n\n  /**\n   * Noop! Pointless, empty function that will actually be really useful.\n   *\n   * @param {Error} err We failed at something.\n   * @api private\n   */\n  const noop = (err) => err && this.logger.error(err);\n\n  //\n  // Listen to upgrade requests.\n  //\n  this.on('upgrade', (req, socket, head) => {\n    this.service.handleUpgrade(req, socket, head, (socket) => {\n      const spark = new this.Spark(\n          socket.upgradeReq.headers               // HTTP request headers.\n        , socket.upgradeReq                       // IP address location.\n        , url.parse(socket.upgradeReq.url).query  // Optional query string.\n        , null                                    // We don't have an unique id.\n        , socket.upgradeReq                       // Reference to the HTTP req.\n      );\n\n      spark.on('outgoing::end', () => socket && socket.close());\n      spark.on('outgoing::data', (data) => {\n        if (socket.readyState !== socket.OPEN) return;\n        if ('string' === typeof data) return socket.send(data, noop);\n\n        socket.send(data, { binary: true }, noop);\n      });\n\n      socket.on('message', spark.emits('incoming::data'));\n      socket.on('error', spark.emits('incoming::error'));\n      socket.on('ping', spark.emits('incoming::pong', (next) => {\n        next(undefined, null);\n      }));\n      socket.on('close', spark.emits('incoming::end', (next) => {\n        socket.removeAllListeners();\n        socket = null;\n        next();\n      }));\n    });\n  });\n\n  //\n  // Listen to non-upgrade requests.\n  //\n  this.on('request', (req, res) => {\n    res.writeHead(426, { 'content-type': 'text/plain' });\n    res.end(http.STATUS_CODES[426]);\n  });\n\n  this.once('close',  () => this.service.close());\n};\n"}